<% include header %>
<div class="ui grid">
  <div class="ui container" style="padding-bottom : 1cm;">
    <div class="ui segment" style="padding-top: 1cm;padding-bottom: 0px;">
      <div class="ui form">
        <div class="three fields" style="margin-bottom: 0px;padding-left: 6.5%;">
          <div class="ui modal editmodal">
            <i class="close icon"></i>
            <div class="ui input">
              <label for="editinput">editinput</label>
              <input id="editinput" type="text">
              <span id="predicate_value">

              </span>
              <span id="obj_value">

              </span>
            </div>
            <div class="actions">
              <div class="ui black deny button">
                Cancel
              </div>
              <div class="ui positive right labeled icon button">
                Change
                <i class="checkmark icon"></i>
              </div>
            </div>
          </div>
          <div class="twelve wide field">
            <div class="ui big icon input">
              <label for="input-search" class="sr-only">Search Tree:</label>
              <i class="search icon"></i>
              <input type="input" id="input-search" placeholder="Type a concept to search..." value="">
            </div>
          </div>
          <div class="three wide field">
            <div class="ui checkbox" style="margin-top: 15px;">
              <input type="checkbox" id="chk-ignore-case" name="searchOptions" checked="checked" value="false">
              <label>Ignore Case</label>
            </div>
          </div>
          <div class="six wide field">
            <div class="ui large floating dropdown labeled icon button" id="filesDroplist"
              style="background:rgba(255,255,255,.5) none" onclick="getSelectedFileName(this);">
              <i class="filter icon"></i>
              <span class="text">Choose File</span>
              <div class="menu">
                <div class="ui icon search input">
                  <i class="search icon"></i>
                  <input type="text" placeholder="Select File(s)...">

                </div>
                <div class="divider"></div>
                <div id="itemFiles" class="scrolling menu">
                  <div class="item">
                    <div class="ui red empty circular label"></div>
                    ALL Files
                  </div>
                  <%if (fileNames != null) { %>
                  <%fileNames.forEach(function (item) {%>
                  <div class="item">
                    <div class="ui blue empty circular label"></div>
                    <%= item %>
                  </div>
                  <%});%>
                  <%}%>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="ui vertical stripe segment" style="padding-top: 0px; padding-left: 8%;padding-bottom: 0px;">
          <div class="ui grid stackable container">
            <div class="row">
              <div class="ui three column stackable divided grid">
                <div class="row">
                  <div class="ui segments" style=" text-align: center; margin-top: 0;  margin-right: 25px; ">
                    <div class="ui blue segment">
                      <h3 class="ui header">
                        <i class="grey options icon"></i>Type
                      </h3>
                    </div>
                    <div class="ui segment">
                      <div class="fields">
                        <div class="ui radio checkbox">
                          <input type="radio" name="typesRadio" id="allTypesRadio" value="1" checked="checked">
                          <label>All</label>
                          <div class="floating ui blue label" id="allTypesNumberlbl" style="font-size: 0.65rem;top: 3em; margin: -6px 0px 0px -4.5em!important">0</div>
                        </div>
                        <div class="ui radio checkbox">
                          <input type="radio" name="typesRadio" id="classRadio" value="2">
                          <label>Classes</label>
                          <div class="floating ui blue label" id="classesNumberlbl" style="font-size: 0.65rem;top: 3em; margin: -6px 0px 0px -4.5em!important">0</div>
                        </div>
                        <div class="ui radio checkbox">
                          <input type="radio" name="typesRadio" id="propertyRadio" value="2">
                          <label>Properties</label>
                          <div class="floating ui blue label" id="propertiesNumberlbl" style="font-size: 0.65rem;top: 3em; margin: -6px 0px 0px -5.5em!important">0</div>
                        </div>
                        <div class="ui item">
                          <div class="ui fluid selection dropdown" id="propertyTypeDropdown" style="width:180px; margin-top: -9px;; margin-left: 8px;">
                            <div class="text"> Select Property ... </div>
                            <i class="dropdown icon"></i>
                            <div class="menu">
                              <div class="item">All</div>
                              <div class="item">RDF Property</div>
                              <div class="item">Object Property</div>
                              <div class="item">Datatype Property</div>
                              <div class="item">Annotation Property</div>
                            </div>
                          </div>
                        </div>
                        <div class="ui radio checkbox" style="padding-right:5px">
                          <input type="radio" name="typesRadio" id="individualsPropertyRadio">
                          <label>Individuals</label>
                          <div class="floating ui green label" id="individualsNumberlbl" style="font-size: 0.65rem;top: 3em; margin: -6px 0px 0px -6.5em!important">0</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="ui segments" style="margin-right: 15px; text-align: center; margin-top: 0; margin-right: 27px;">
                    <div class="ui blue segment">
                      <h3 class="ui header">
                        <i class="grey unhide icon"></i>View
                      </h3>
                    </div>
                    <div class="ui segment">
                      <div class="field">
                        <div class="ui radio checkbox">
                          <input type="radio" name="myRadios" id="RDFSViewCheckBox" value="1" checked="checked">
                          <label>RDF(S) </label>
                        </div>
                        <div class="ui radio checkbox">
                          <input type="radio" name="myRadios" id="SKOSViewCheckBox" value="2">
                          <label>SKOS </label>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="ui segments" style=" text-align: center; margin-top: 0; margin-bottom: 14px;">
                    <div class="ui blue segment">
                      <h3 class="ui header">
                        <i class="grey puzzle piece icon"></i>Show others
                      </h3>
                    </div>
                    <div class="ui segment">
                      <div class="field">
                        <div class="ui slider checkbox">
                          <input type="checkbox" name="mySliders" id="showTypesCheckBox" tabindex="0">
                          <label>Type</label>
                        </div>
                        <div class="ui slider checkbox">
                          <input type="checkbox" name="mySliders" id="showFilesCheckBox" tabindex="1">
                          <label>File</label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="treeContainer" class="col-sm-12  col-md-6" style="display: none;overflow-x: hidden; overflow-y: auto; height: 500px;border-style: outset; border-radius: 10px;">
      <br />
      <div id="notFoundMessage" style="display:none">
      </div>
      <div id="tree" style=" overflow-x: hidden;">
      </div>
  </div>
    <div id="infoTabs" class="col-sm-12 col-md-6" style="display: none;overflow-x: hidden; overflow-y: auto; height:500px;border-style: outset;border-radius: 10px;">
      <div id="externalInfo"></div>
      <ul id="viewList" class="nav nav-tabs" style="display: none">
        <li class="active"><a class="nav-link active" data-toggle="tab" id="documentationTab" href="#documentation">Documentation</a></li>
        <li><a class="nav-link" data-toggle="tab" id="sourceCodeTab" href="#sourceCode">Source</a></li>
        <li><a class="nav-link" data-toggle="tab" id="graphTab" href="#showGraph">Graphical Depiction</a></li>
        <li class="nav-item">
          <div id="fullScreenButton" class="ui basic icon button" style="margin-left: 85px; margin-top: 2px;"
            data-tooltip="Add users to your feed">
            <a href="#" onmousedown="getFullScreenConcept(); return false; "> <i class="expand icon"></i> </a>
          </div>
        </li>
      </ul>
      <div class="tab-content">
        <div class="tab-pane active" id="documentation" role="tabpanel">
          <div id="infoDetails">
            <h2 id="conceptHead" style="display: none; margin-top:9px"> Details: </h2>
            <div id="detailTable" style="padding-bottom:20px"></div>
            <div id="domainTable" style="display: none; padding-bottom:20px"></div>
            <div id="domainPropertyTable" style="display: none; padding-bottom:20px"></div>
            <div id="rangePropertyTable" style="display: none; padding-bottom:20px"></div>
            <div id="rangeTable" style="display: none; padding-bottom:20px"></div>
            <div id="instancesTable" style="display: none"></div>
            <h4 id="instanceHead" style="display: none; margin-top:9px"></h4>
            <div id="instanceDetailsTable" style="display: none"></div>
          </div>
        </div>
        <div class="tab-pane" class="tabContent" id="sourceCode" role="tabpanel">
          <div class="ui buttons" id="sourceCodeFormats">
            <button class="ui red basic button" id="turtleCodeBnt" value="text/turtle" >Turtle/NTriples</button>
            <button class="ui teal basic button" id="ldJsonCodeBnt" value="application/ld+json" style="display: none">JSON-LD</button>
            <button class="ui blue basic button" id="rdfxmlCodeBnt" value="application/rdf+xml" style="display: none">RDF/XML</button>
          </div>
          <div id="yasqe" style="overflow: hidden;display: none"></div>
          <div id="xmlCodeDiv" style="display: none">
            <pre><code  id="xmlCode" ></code></pre>
          </div>
          <div id="jsonCodeDiv" style="display: none">
            <pre><code  id="jsonCode" ></code></pre>
          </div>
        </div>
        <div class="tab-pane" class="tabContent" id="showGraph" role="tabpanel">
          <div id="mynetwork"></div>
          <p id="selection"></p>
        </div>
      </div>
    </div>
    <div id="coverScreenTree" class="LockOn" style=" display: none;">

</div>


<div class="ui large modal editmodal" style="height: 50%;">
  <div class="header">
      Editor
  </div>
  <div class="content">
    <div class="description">
      <div class="ui header editHeader">Edit value</div>

      <!-- when editing S P O -->
      <div id="spo_edit" class="ui input" style="width: 100%;">
        <table class="ui green celled striped table">
          <tr class="positive"><th>Predicate</th><th>Object</th></tr>
          <tr>
            <td><input style="width: 100%;" id="predicate_value" type="text"></td>
            <td><input style="width: 100%;" id="obj_value" type="text"></td>
          </tr>
        </table>
      </div>

      <!-- when editing Subject only -->
      <div id="s_edit" style="display: none;" class="ui input" style="width: 100%;">
        <table class="ui green celled striped table">
          <tr class="positive"><th>Subject</th></tr>
          <tr>
            <td><input style="width: 100%;" id="subject_value" type="text"></td>
          </tr>
        </table>
      </div>

    </div>
  </div>
  <div class="actions">
    <div id="cancel" class="ui black deny button">
      Cancel
    </div>
    <div class="ui positive right labeled icon button" onclick="changeRDF()">
      Change
      <i class="checkmark icon"></i>
    </div>
  </div>
</div>

<!-- End of UI container -->
</div>

    <% include footer %>
                  <!-- End of expressJS coding-->

                  <!-- Start of javascript coding-->

                  <!-- 
                  ///////////////////////////////////////////
                  // Waleed Code Starts
                  /////////////////////////////////////////// 
                  -->

                  
                  <script src="https://cdn.jsdelivr.net/npm/socket.io-client@2/dist/socket.io.js"></script>
                  <script>

                    // CONSTANTS
                    var SEPARATOR = "&_sep_&"
                    var NONE_VALUE = "__NONE__"

                    siiimpleToast = siiimpleToast.setOptions({
                      container: 'body',
                      class: 'siiimpleToast',
                      position: 'bottom|right',
                      margin: 15,
                      delay: 0,
                      duration: 3000,
                      style: {},
                    });

                    var socket = io('http://localhost:3060');

                    if(socket){
                      console.log(socket);
                    }
                    else{
                      console.log("client socket not connected");
                    }
         
                    socket.emit('connectedToServer');

                    var lockedItemsClient = {};
                    var newBuildTreeData = []

                    ///////////////////////////////////////////
                    // Waleed Code Ends
                    /////////////////////////////////////////// 

                    // get all the data from route.tree.js
                    var RDFSData = [];
                    var SKOSData = [];
                    var mixRDFConcepts = [];
                    var mixSKOSConcepts = [];
                    var isfileNameSelected = false;
                    var currentFiles = <%-JSON.stringify(fileNames) %> ;
                    var RDFObjPlusURI = [];
                    var SKOSObjPlusURI = [];
                    var individiualsData = [];
                    // store the selected concept
                    var currentSelectedConcept = "",
                      currentSelectedIndividualURI = "";
                    // store current elements in the tree, it has RDFS concepts initially
                    var currentTreeData = RDFSData;
                    // store which file is selected from the dropdown menuSize
                    var currentSelectedFile = "ALL Files";
                    // store SKOS URI of the selected node
                    var currentSelectedSKOSURI = "";
                    // store RDF type filter if it is selcted
                    var currentSelectedRDFType = "";
                    // initilaiztion of ui elements
                    $('.ui.radio.checkbox').checkbox();
                    $('.ui.dropdown').dropdown();
                    $('.ui.checkbox').checkbox();
                    $("#coverScreenTree").show();

                    /// works on named namedGraphs
                    var fromInQueryWithoutNamed = <%- JSON.stringify(fromNamedGraphs).replace(/named/g, '') %> ;
                    var fromInQuery = <%- JSON.stringify(fromNamedGraphs) %> ;
                    // console.log(fromInQuery)
                    // console.log('fromInQuery')

                    /////////////////////////////////////////////////////////////////////////
                    /////////////////////////////////////////////////////////////////////////

                    // query to get RDFS_Concepts
                    var RDFSConceptsQuery = function (namedGraphsString) {
                      return ("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> " +
                        " PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> " +
                        " PREFIX owl:  <http://www.w3.org/2002/07/owl#> " +
                        " PREFIX foaf: <http://xmlns.com/foaf/0.1/> " +
                        " PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#> " +
                        " PREFIX skos: <http://www.w3.org/2004/02/skos/core#> " +
                        " PREFIX  afn:  <http://jena.apache.org/ARQ/function#> " +
                        " SELECT  DISTINCT ?concept (afn:localname(?concept) AS ?TrimmedConcept) ?RDFType ?Parent (afn:localname(?Parent) AS ?TrimmedParent)  ?g  " +
                        namedGraphsString +
                        " WHERE {   GRAPH ?g { {" +
                        " ?concept rdfs:subClassOf ?Parent . ?concept a ?RDFType.  FILTER(!isBlank(?concept)) FILTER(!isBlank(?Parent)) } " +
                        "  UNION     { ?concept rdfs:subPropertyOf ?Parent .  ?concept a ?RDFType." +
                        "  FILTER(!isBlank(?concept)) FILTER(!isBlank(?Parent)) }  " +
                        "     UNION{ ?concept a ?RDFType . OPTIONAL {?concept ?p ?o.} " +
                        "       FILTER(!isBlank(?concept)) " +
                        " FILTER (!contains(str(?RDFType), \"skos/core#\"))" +
                        " FILTER (contains(str(?RDFType), \"owl#\")||contains(str(?RDFType), \"22-rdf-syntax-ns#\")||contains(str(?RDFType),\"rdf-schema#\" ))}" +
                        " MINUS{?concept a owl:NamedIndividual  ." +
                        " }" +
                        " MINUS{?concept a owl:Thing .}" +
                        " }} "
                      );
                    }

                    // query to get Individual
                    var individualsQuery = function (namedGraphsString) {
                      return ("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>" +
                        " PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>" +
                        " PREFIX owl:  <http://www.w3.org/2002/07/owl#>" +
                        " PREFIX skos: <http://www.w3.org/2004/02/skos/core#>" +
                        " SELECT DISTINCT ?s ?RDFType ?g  " +
                        namedGraphsString +
                        " WHERE {    GRAPH ?g { {" +
                        " ?s a ?RDFType ; ?p ?o." +
                        " FILTER (!contains(str(?RDFType), \"owl#\"))" +
                        " FILTER (!contains(str(?RDFType), \"rdf-schema#\"))" +
                        " FILTER (!contains(str(?RDFType), \"22-rdf-syntax-ns#\"))" +
                        " FILTER (!contains(str(?RDFType), \"skos/core#\"))" +
                        " FILTER (!contains(str(?p), \"subClassOf\"))" +
                        " FILTER (!contains(str(?p), \"subPropertyOf\"))" +
                        " }" +
                        " UNION{?s a ?RDFType ." +
                        "  FILTER (contains(str(?RDFType), \"owl#NamedIndividual\"))" +
                        " }" +
                        " UNION{?s a ?RDFType ." +
                        "     FILTER (contains(str(?RDFType), \"owl#Thing\"))" +
                        " }}}");
                    }
                    // query to get RDFSObjects

                    var RDFSObjectsQuery = function (namedGraphsString) {
                      return ("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> " +
                        "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> " +
                        "PREFIX owl:  <http://www.w3.org/2002/07/owl#>  " +
                        "PREFIX foaf: <http://xmlns.com/foaf/0.1/>  " +
                        "PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>  " +
                        "PREFIX skos: <http://www.w3.org/2004/02/skos/core#> " +
                        "SELECT Distinct ?o ?g " +
                        namedGraphsString +
                        " WHERE {  GRAPH ?g {" +
                        "?s ?p ?o. FILTER (!isLiteral(?o))   FILTER(!isBlank(?o))" + "MINUS " +
                        "  { ?s ?p ?o. FILTER (!isLiteral(?o))   FILTER(!isBlank(?o)) FILTER(regex(str(?p), \"skos/core#\" )) }" +
                        "}}");

                    }

                    var SKOSConceptsQuery1 = function (namedGraphsString) {
                      return ("  PREFIX skos: <http://www.w3.org/2004/02/skos/core#> " +
                        "  SELECT  distinct ?subject ?oBroader ?RDFType  ?g  " +
                        namedGraphsString + "  WHERE { " +
                        "  GRAPH ?g { { ?subject a ?RDFType . " +
                        "  OPTIONAL{?subject skos:broader ?oBroader .} " +
                        "  FILTER (contains(str(?RDFType), \"skos/core#\"))}}} ");
                    }
                    var SKOSConceptsQuery2 = function (namedGraphsString) {
                      return ("  PREFIX skos: <http://www.w3.org/2004/02/skos/core#> " +
                        "  SELECT  distinct ?subject  ?RDFType ?oNarrower ?g   " +
                        namedGraphsString + "  WHERE { " +
                        "   GRAPH ?g { { ?subject a ?RDFType  .  " +
                        "  OPTIONAL{?subject skos:narrower ?oNarrower .} " +
                        "  FILTER (contains(str(?RDFType), \"skos/core#\"))}}} ");
                    }

                    var SKOSObjectsQuery = function (namedGraphsString) {
                      return ("  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>  " +
                        "  PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>" +
                        "  PREFIX owl:  <http://www.w3.org/2002/07/owl#>  " +
                        "PREFIX foaf: <http://xmlns.com/foaf/0.1/>  " +
                        "  PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>  " +
                        "  PREFIX skos: <http://www.w3.org/2004/02/skos/core#> " +
                        "  SELECT Distinct ?o  " + namedGraphsString +
                        "  WHERE {   GRAPH ?g { { ?s1 ?p ?o1. ?s1 ?p1 ?o.  FILTER (!isLiteral(?o))   FILTER(!isBlank(?o)) FILTER(regex(str(?p), \"skos/core#\" ))   " +
                        "  MINUS {?o a owl:NamedIndividual }}}}");
                    }

                    function execQuery(currentQueryString, caller, other) {
                      return new Promise(function (resolve, reject) {
                        var endpoint = "./../../fuseki/dataset/sparql?query=";
                        $.ajax({
                          type: 'POST',
                          data: {
                            query: encodeURIComponent(currentQueryString)
                          },
                          url: './../../sparqlServer/query',
                          success: function (data, response, jqXHR) {
                            var result = JSON.parse(data).results.bindings;
                            if (result.length > 0) {
                              if (caller == "RDFConcepts") {
                                let JSONRDFObjectArrary = [];
                                for (var k in result) {
                                  var JSONRDFObject = {
                                    "parent": (result[k].hasOwnProperty("TrimmedParent")) ? result[k][
                                      "TrimmedParent"
                                    ].value : "",
                                    "concept": result[k]["TrimmedConcept"].value,
                                    "URI": result[k]["concept"].value,
                                    "RDFType": replaceWithRDFType(result[k]["RDFType"].value),
                                    "fileName": result[k]["g"].value.substring(
                                      result[k]["g"].value.lastIndexOf('/') + 1, result[k]["g"].value[
                                        result[k]["g"].value
                                        .length])
                                  };
                                  JSONRDFObjectArrary.push(JSONRDFObject);
                                }
                                resolve(JSONRDFObjectArrary);
                              }
                              if (caller == "RDFObjects") {
                                  var JSONRDFObjectArrary = [];
                                  for (var k in result) {
                                    var JSONRDFObject = {
                                      "object": replaceWithRDFType(result[
                                          k]["o"]
                                        .value),
                                      "URI": result[k]["o"].value
                                    };
                                    JSONRDFObjectArrary.push(JSONRDFObject);
                                  }
                                  resolve(JSONRDFObjectArrary);
                              } else if (caller == "Individuals") {
                                    var JSONRDFObjectArrary = [];
                                    for (var k in result) {
                                      var JSONRDFObject = {
                                        "subject": trimInstance(result[k][
                                          "s"
                                        ].value),
                                        "subjectURI": result[k]["s"].value,
                                        "RDFType": replaceWithRDFType(result[
                                          k]["RDFType"].value),
                                        "fileName": result[k]["g"].value.substring(
                                          result[k]["g"].value.lastIndexOf(
                                            '/') + 1, result[k]["g"].value[
                                            result[k]["g"].value.length]
                                        )
                                      };
                                      JSONRDFObjectArrary.push(JSONRDFObject);
                                    }
                                    resolve(JSONRDFObjectArrary);  
                              } else if (caller == "childParent") {
                                  var JSONRDFObjectArrary = [];
                                  for (var k in result) {
                                    var JSONRDFObject = {
                                      "parent": result[k]["classParent"].value,
                                      "child": result[k]["classChild"].value
                                    };
                                    JSONRDFObjectArrary.push(JSONRDFObject);
                                  }
                                  resolve(JSONRDFObjectArrary);
                                
                              } else if (caller == "SKOSBroaders") {
                                  var JSONRDFObjectArrary = [];
                                  for (var k in result) {
                                    if (result[k]["subject"] != null) {
                                      var JSONRDFObject = {
                                        "concept": trim(result[k][
                                          "subject"
                                        ].value),
                                        "URI": result[k]["subject"].value,
                                        "fileName": result[k]["g"].value
                                          .substring(
                                            result[k]["g"].value.lastIndexOf(
                                              '/') + 1, result[k]["g"]
                                            .value[
                                              result[k]["g"].value.length
                                            ])
                                      };
                                      if (result[k]["oBroader"] !=
                                        null) {
                                        JSONRDFObject.childURI = result[
                                          k]["subject"].value;
                                        JSONRDFObject.parentURI = result[
                                          k]["oBroader"].value;
                                        JSONRDFObject.child = trim(result[
                                          k]["subject"].value);
                                        JSONRDFObject.parent = trim(result[
                                          k]["oBroader"].value);
                                      } else {
                                        JSONRDFObject.child = "";
                                        JSONRDFObject.parent = ""
                                      }
                                      if (result[k]["RDFType"].value !=
                                        null) {
                                        JSONRDFObject.RDFType = replaceWithRDFType(
                                          data.results[k]["RDFType"].value);

                                      }
                                      JSONRDFObjectArrary.push(JSONRDFObject);
                                    }
                                  }
                                  resolve(JSONRDFObjectArrary);
                                
                              } else if (caller == "SKOSNarrowers") {
                                  var JSONRDFObjectArrary = [];
                                  for (var k in result) {
                                    var isDuplicateData = false;
                                    if (other) {
                                      for (var i in other) {
                                        if (JSON.stringify(other[i]['parent']).includes(
                                            JSON.stringify(trim(result[
                                              k]["subject"].value))) && JSON.stringify(
                                            other[i]['child'])
                                          .includes(
                                            JSON.stringify(trim(result[
                                              k]["oNarrower"].value)))) {
                                          // console.log(JSON.stringify(other[i]['parent']));
                                          // console.log(JSON.stringify(trim(result[k]["subject"].value)));
                                          isDuplicateData = true;
                                          break;
                                        }
                                      }
                                    }
                                    if (!isDuplicateData) {
                                      if (result[k]["subject"] != null) {
                                        var JSONRDFObject = {
                                          "concept": trim(result[k][
                                            "subject"
                                          ].value),

                                          "URI": result[k][
                                            "subject"
                                          ].value,
                                          "fileName": result[k][
                                            "g"
                                          ].value.substring(
                                            result[k]["g"].value.lastIndexOf(
                                              '/') + 1, result[k][
                                              "g"
                                            ].value[
                                              result[k]["g"].value
                                              .length]
                                          )
                                        };
                                        if (result[k]["oNarrower"] !=
                                          null) {
                                          JSONRDFObject.parentURI = result[
                                            k]["subject"].value;
                                          JSONRDFObject.childURI = result[
                                            k]["oNarrower"].value;
                                          JSONRDFObject.parent = trim(result[
                                            k]["subject"].value);
                                          JSONRDFObject.child = trim(result[
                                            k]["oNarrower"].value);
                                        } else {
                                          JSONRDFObject.child = "";
                                          JSONRDFObject.parent = ""
                                        }
                                        if (result[k]["RDFType"].value !=
                                          null) {
                                          JSONRDFObject.RDFType = replaceWithRDFType(
                                            result[k]["RDFType"].value
                                          );
                                        }
                                        JSONRDFObjectArrary.push(JSONRDFObject);
                                      }
                                    }
                                  }
                                  // console.log(JSONRDFObjectArrary);
                                  resolve(JSONRDFObjectArrary);
                                
                              } else if (caller == "SKOSObjects") {
                                  var JSONRDFObjectArrary = [];
                                  for (var k in result) {
                                    var JSONRDFObject = {
                                      "object": replaceWithRDFType(result[
                                          k]["o"]
                                        .value),
                                      "URI": result[k]["o"].value
                                    };
                                    JSONRDFObjectArrary.push(JSONRDFObject);
                                  }
                                  resolve(JSONRDFObjectArrary);
                                
                              }
                            } else {
                              //console.warn(response);
                              reject(response);
                            }
                          }
                        });
                      });
                    }

                    // check if graphList is empty
                    if (fromInQuery) {
                      execQuery(RDFSConceptsQuery(fromInQuery), "RDFConcepts").then(function (result) {
                        // show full tree for the first time
                        // since RDFS checkbox is clicked by default
                        RDFSData = result;
                        currentTreeData = result;
                        // debugger

                        execQuery(individualsQuery(fromInQuery), "Individuals").then(function (
                        res) {
                          individiualsData = res;
                          showRDFSTree(RDFSData, currentSelectedFile);
                          $("#coverScreenTree").hide();
                      },   function(error) {  
                            showRDFSTree(RDFSData, currentSelectedFile);
                          $("#coverScreenTree").hide(); 
                        });



                      });
                      execQuery(RDFSObjectsQuery(fromInQuery), "RDFObjects").then(function (result) {
                        RDFObjPlusURI = result;
                        // console.log(RDFObjPlusURI);
                      });
                      execQuery(SKOSConceptsQuery1(fromInQuery), "SKOSBroaders").then(function (result) {
                        var SKOSData1 = result;
                        SKOSData = SKOSData.concat(SKOSData1);
                      });
                      execQuery(SKOSConceptsQuery2(fromInQuery), "SKOSNarrowers").then(function (result) {
                        var SKOSData2 = result;
                        SKOSData = SKOSData.concat(SKOSData2)
                      });
                      execQuery(SKOSObjectsQuery(fromInQuery), "SKOSObjects").then(function (result) {
                        SKOSObjPlusURI = result;
                      });
                    }

                    /////////////////////////////////////////////////////////////////////////
                    /////////////////////////////////////////////////////////////////////////
                    // disable propertyTypeDropdown at the start
                    $('#propertyTypeDropdown').addClass("disabled");


                    // filter treeData based on type
                    function getViewDataBasedOnType(data, str) {
                      return data.filter(function (element) {
                        if (element.RDFType.includes(str))
                          return element
                      })
                    }

                    // redirect to getFullScreen of the concept
                    function getFullScreenConcept() {
                      var currentURL = "";
                      if (currentSelectedConcept) {
                        if (document.URL.includes("documentation"))
                          currentURL = document.URL.split("/documentation")[0] + document.URL.split("/documentation")[
                            1];
                        location.href = currentURL + '/' + currentSelectedConcept;

                      }
                    }

                    // show SKOS concepts on treeview
                    function showIndividualTree(data, file) {
                      if (data === individiualsData || data.length === 0) {
                        var viewData = individiualsData;
                        currentTreeData = individiualsData;
                      } else {
                        var viewData = data;
                        currentTreeData = data;
                      }

                      // Just one check is on not both
                      if (isCheckedshowTypesCheckBox)
                        $('#showFilesCheckBox').prop('checked', false);
                      if (isCheckedshowFilesCheckBox)
                        $('#showTypesCheckBox').prop('checked', false);
                      if ($('#showTypesCheckBox').is(':checked')) {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].subject;
                          viewData[i].tags = ['<a  class="ui tiny teal tag label">' + viewData[i].RDFType + '</a>'];
                        }
                      } else if ($('#showFilesCheckBox').is(':checked')) {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].subject;
                          viewData[i].tags = ['<a  class="ui tiny pink tag label">' + viewData[i].fileName + '</a>'];
                        }
                      } else {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].subject;
                          viewData[i].tags = [''];
                        }
                      }
                      var data = [];
                      data = viewData;
                      if (file !== "ALL Files") {
                        currentTreeData = getIndividualsFileData(data, file);
                        data = getIndividualsFileData(data, file);
                      }
                      if (data) {
                        $('#notFoundMessage').hide();

                        $("#treeContainer").show();
                        $("#tree").show();
                      } else {
                        $("#treeContainer").hide();
                        $("#tree").hide();
                      } // make array unique
                      data = uniqueArray(data);
                      // update numbers of classes, properties, individual .. etc
                      updateTypeNumbers();
                      // sorting the tree before viewing
                      data.sort(function (a, b) {
                        return ((a.text.toLowerCase() == b.text.toLowerCase()) ? 0 : ((a.text.toLowerCase() > b.text
                            .toLowerCase()) ?
                          1 : -1));
                      });
                      // rebuild tree with the new SKOS data
                      buildTree(data);
                    }



                    // show SKOS concepts on treeview
                    function showSKOSTree(data, file, str) {

                      if (data === SKOSData || data.length === 0) {
                        var viewData = SKOSData;
                        currentTreeData = SKOSData;
                      } else {
                        var viewData = data;
                        currentTreeData = data;
                      }

                      // Just one check is on not both
                      if (isCheckedshowTypesCheckBox)
                        $('#showFilesCheckBox').prop('checked', false);
                      if (isCheckedshowFilesCheckBox)
                        $('#showTypesCheckBox').prop('checked', false);

                      if (str) {
                        viewData = getViewDataBasedOnType(viewData, str);
                        currentTreeData = viewData;
                      }

                      var allParents = getUniqueParents(viewData);
                      var data = [];
                      var parentNodes = [];
                      if ($('#showTypesCheckBox').is(':checked')) {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].concept;
                          // check for multiple types
                          const allTypes = _(SKOSData)
                            .filter(o => {
                              return o.concept === viewData[i].concept
                            })
                            .map(o => {
                              return '<a  class="ui tiny teal tag label">' + o.RDFType + '</a>';
                            })
                            .valueOf();
                          var allUniqueTypes = allTypes;
                          viewData[i].tags = uniqueArray(allUniqueTypes, "RDFType");
                        }
                        parentNodes = getParentWithChildren(viewData, allParents, 'typeTag');

                      } else if ($('#showFilesCheckBox').is(':checked')) {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].concept;
                          viewData[i].tags = ['<a  class="ui tiny pink tag label">' + viewData[i].fileName + '</a>'];
                        }
                        parentNodes = getParentWithChildren(viewData, allParents, 'fileTag');

                      } else {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].concept;
                          viewData[i].tags = [''];
                        }
                        parentNodes = getParentWithChildren(viewData, allParents);

                      }
                      data = parentNodes;

                      if (file !== "ALL Files") {
                        currentTreeData = getSKOSFileData(data, file);
                        data = getSKOSFileData(data, file);
                      }
                      if (data.length > 0) {
                        $('#notFoundMessage').hide();
                        $("#treeContainer").show();
                        $("#tree").show();
                      } else {
                        $("#treeContainer").hide();
                        $("#tree").hide();
                      }
                      // make array unique
                      data = uniqueArray(data);
                      // sorting the tree before viewing
                      data.sort(function (a, b) {
                        return ((a.text.toLowerCase() == b.text.toLowerCase()) ? 0 : ((a.text.toLowerCase() > b.text
                            .toLowerCase()) ?
                          1 : -1));
                      });

                      // rebuild tree with the new SKOS data
                      buildTree(data);
                    }

                    // get ExternalsConcepts for either SKOS or RFS(S)
                    function getExternalsConcepts() {
                      var externalConcepts = [];
                      if ($('#SKOSViewCheckBox').is(':checked')) {
                        var internals = [];
                        mixSKOSConcepts.forEach(function (item) {
                          for (var i = 0; i < SKOSData.length; i++) {
                            if (item === SKOSData[i].child || item === SKOSData[i].concept || item === SKOSData[i]
                              .parent ||
                              SKOSData[i].RDFType.includes("NamedIndividual")) {
                              internals.push(item);
                            }
                          }
                        });
                        externalConcepts = $(mixSKOSConcepts).not(internals).get();
                      }
                      if ($('#RDFSViewCheckBox').is(':checked')) {
                        var internals = [];
                        mixRDFConcepts.forEach(function (item) {
                          for (var i = 0; i < RDFSData.length; i++) {
                            if (item === RDFSData[i].concept) {
                              internals.push(item);
                            }
                          }
                        });
                        externalConcepts = $(mixRDFConcepts).not(internals).get();
                      }
                      return externalConcepts;
                    }


                    // make unique concept in  tree
                    function uniqueArray(array, str) {
                      var a = array.concat();
                      for (var i = 0; i < a.length; i++) {
                        for (var j = i + 1; j < a.length; j++) {
                          switch (str) {
                            case "RDFType":
                              if (a[i] === a[j])
                                a.splice(j--, 1);
                              break;
                            case "subject":
                              if (a[i].subject === a[j].subject)
                                a.splice(j--, 1);
                              break;
                            default:
                              if (a[i].text === a[j].text)
                                a.splice(j--, 1);
                          }
                        }
                      }
                      return a;
                    }

                    // update the  numbers of classes, properties, individuals .. etc
                    function updateTypeNumbers(currentSelectedIndividual) {
                      var individualsCount = 0,
                        propertiesCount = 0,
                        classesCount = 0,
                        skosCount = 0,
                        allTypesCount = 0;
                      var array = [];
                      if (currentSelectedFile != "ALL Files") {
                        array = _.filter(individiualsData, function (o) {
                          if (o.fileName === currentSelectedFile)
                            return o;
                        });
                        if (array) {
                          array = uniqueArray(array, "subject");
                          individualsCount = _.size(array);
                        }
                      } else if (currentSelectedIndividual) {
                        if (currentSelectedIndividual.length > 0) {
                          array = uniqueArray(currentSelectedIndividual, "subject");
                          individualsCount = _.size(array);
                        }
                      } else {
                        if (individiualsData.length > 0) {
                          array = uniqueArray(individiualsData, "subject");
                          individualsCount = _.size(array);
                        }
                      }
                      // console.log('individiualsData')
                      // console.log(individiualsData)

                      var filterTypes = function (arr, term) {
                        var matches = [];
                        var counter = 0;
                        if (Array.isArray(arr) && arr.length > 0) {
                          arr.forEach(function (i) {
                            if (i.RDFType.includes(term)) {
                              matches.push(i);
                            } else if (i.hasOwnProperty("nodes")) {
                              let childResults = filterTypes(i.nodes, term);
                              if (childResults.length) {
                                matches.push(Object.assign({}, i, {
                                  nodes: childResults
                                }));
                              }
                            }
                          })
                        }
                        return matches;
                      }
                      var array2 = [];
                      if (currentSelectedFile != "ALL Files") {
                        var dataFileToBeFiltered = "";
                        if ($('#SKOSViewCheckBox').is(':checked')) {
                          dataFileToBeFiltered = SKOSData;
                        } else if ($('#RDFSViewCheckBox').is(':checked')) {
                          dataFileToBeFiltered = RDFSData;
                        }
                        dataFileToBeFiltered = _.filter(dataFileToBeFiltered, function (obj) {
                          if (obj.fileName === currentSelectedFile)
                            return obj;
                        });
                        if ($('#SKOSViewCheckBox').is(':checked')) {
                          skosCount = filterTypes(dataFileToBeFiltered, "Concept").length;
                          allTypesCount = skosCount;
                        } else if ($('#RDFSViewCheckBox').is(':checked')) {
                          propertiesCount = filterTypes(dataFileToBeFiltered, "Property").length;
                          classesCount = filterTypes(dataFileToBeFiltered, "Class").length;
                          allTypesCount = propertiesCount + classesCount;
                        }
                      } else if (currentTreeData.length > 0 && !$('#individualsPropertyRadio')
                          .is(':checked')) {
                        if ($('#SKOSViewCheckBox').is(':checked')) {
                          skosCount = filterTypes(currentTreeData, "Concept").length;
                          allTypesCount = skosCount;
                        } else if ($('#RDFSViewCheckBox').is(':checked')) {
                          propertiesCount = filterTypes(currentTreeData, "Property").length;
                          classesCount = filterTypes(currentTreeData, "Class").length;
                          allTypesCount = propertiesCount + classesCount;
                        }
                      }
                        else if ($('#individualsPropertyRadio').is(':checked')){
                          propertiesCount = filterTypes(RDFSData, "Property").length;
                          classesCount = filterTypes(RDFSData, "Class").length;
                          skosCount = filterTypes(SKOSData, "Concept").length;
                          allTypesCount = propertiesCount + classesCount + skosCount;
                          }
                        
                      //else {
                      //   propertiesCount = 0;
                      //   classesCount = 0;
                      //   skosCount = 0;
                      //   allTypesCount = 0;
                      // }
                      $('#individualsNumberlbl').text(individualsCount.toString());
                      $('#propertiesNumberlbl').text(propertiesCount.toString());
                      $('#classesNumberlbl').text(classesCount.toString());
                      $('#allTypesNumberlbl').text(allTypesCount.toString());
                    }

                    // show info. for external Concepts and thier instaces
                    function showExternalInfo(str) {
                      var ExteralURI = getExternalURI(str);
                      // check if hideExternalConceptsCheckBox is checked
                      if ($('#hideExternalConceptsCheckBox').is(':checked')) {
                        $('#hideExternalConceptsCheckBox').prop('checked', false);
                        if ($('#SKOSViewCheckBox').is(':checked')) {
                          $('#documentation').tab('show')
                          showSKOSTree(SKOSData, currentSelectedFile);
                        } else {
                          $('#documentation').tab('show')
                          showRDFSTree(RDFSData, currentSelectedFile);
                        }
                      }
                      // check if URI for external concept is exist
                      if (ExteralURI) {
                        //scrollTop if class clicked from instanceDetailsTable
                        $("#infoTabs").animate({
                          scrollTop: 0
                        }, "fast");
                        $("#instanceHead").hide();
                        $("#instanceDetailsTable").hide();
                        $("#instancesTable").hide();
                        var externalURITable = '<div class="ui attached error message">' +
                          '<div class="header"> This concept is external </div></div>';
                        // check if it URL ends with "/"
                        if (ExteralURI[ExteralURI.length - 1] === ('/')) {
                          var link = '<a href=' + ExteralURI.slice(0, -1) + '>' + ExteralURI.slice(0, -1) + '</a>';
                        } else {
                          var link = '<a href=' + ExteralURI + '>' + ExteralURI + '</a>';
                        }
                        //show info. about the external concept
                        externalURITable +=
                          '<div class="ui bottom attached fluid segment"> For more details, please click the following link: <br/><br/> ' +
                          link;
                        externalURITable += '</div>';
                        $('#infoTabs').show();
                        $('a[href="#documentation"]').click();
                        $('#sourceCodeTab').hide();
                        $('#graphTab').hide();
                        $('#infoDetails').show();
                        $("#domainTable").hide();
                        $("#domainPropertyTable").hide();
                        $("#rangePropertyTable").hide();
                        $("#rangeTable").hide();
                        $("#instancesTable").hide();
                        $("#instanceHead").hide();
                        $("#instanceDetailsTable").hide();
                        $("#conceptHead").show();
                        if (ExteralURI[ExteralURI.length - 1] === ('/')) {
                          var str = ExteralURI.slice(0, -1);
                          $("#conceptHead").html('<p>  Details: <code>' + trimHash(trimSlash(str)) + '</code></p>');
                        } else {
                          $("#conceptHead").html('<p>  Details: <code>' + trimHash(replaceWithRDFType(trimSlash(
                              ExteralURI))) +
                            '</code></p>');
                        }
                        $('#detailTable').html(externalURITable);
                        $('#detailTable').transition('shake')
                        var endpoint = "./../../fuseki/dataset/sparql?query=";
                        var querystring = 'SELECT  ?s ' + fromInQueryWithoutNamed + '  WHERE { ?s  a <' + ExteralURI +
                          '> }';
                        $.ajax({
                          type: 'POST',
                          data: {
                            query: encodeURIComponent(querystring)
                          },
                          url: './../../sparqlServer/query',
                          //type: 'GET',
                          //url: endpoint + encodeURIComponent(querystring),
                          // headers: {
                          //   Accept: 'application/sparql-results+json;charset=UTF-8'
                          // },
                          success: function (data, textStatus, jqXHR) {
                            var instances = JSON.parse(data).results.bindings;
                            if (instances[0] != null) {
                              var instancesTable = '<table class="ui pink table" style="table-layout:fixed;>' +
                                '<colgroup> <col class="col-md-4"> </colgroup>' +
                                '<tr>' +
                                '<th>Individuals</th>' +
                                '</tr>';
                              for (var i = 0; i < instances.length; i++) {
                                var instanceURI = instances[i]["s"].value;
                                var key1 = trimHash(trimSlash(instanceURI));
                                key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI +
                                  '&quot;); return false; ">' + key1 + '</a>';
                                instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                              }
                              instancesTable += '</table> ';
                              $("#instancesTable").show();
                              $("#instancesTable").html(instancesTable);
                            } else {
                              $("#instancesTable").hide();
                              $("#instanceHead").hide();
                              $("#instanceDetailsTable").hide();
                            }
                            if (instances[0] != null) {
                              var instancesTable = '<table class="ui red table" style="table-layout:fixed;>' +
                                '<colgroup> <col class="col-md-4"> </colgroup>' +
                                '<tr>' +
                                '<th>Individuals</th>' +
                                '</tr>';
                              for (var i = 0; i < instances.length; i++) {
                                var instanceURI = instances[i]["s"].value;
                                var key1 = trimHash(trimSlash(instances[i]["s"].value));
                                key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI +
                                  '&quot;); return false; ">' + key1 + '</a>';
                                instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                              }
                              instancesTable += '</table> ';
                              $("#instancesTable").show();
                              $("#instancesTable").html(instancesTable);
                            } else {
                              $("#instancesTable").html("");
                              $("#instancesTable").hide();
                              $("#instanceHead").hide();
                              $("#instanceDetailsTable").hide();
                            }
                          }
                        });
                      } else {
                        infoTabs
                        $('#infoTabs').hide();
                        $('#infoDetails').hide();
                        $("#externalInfo").show();
                        $("#externalInfo").html('<p > Concept is External still has no URI</p>');
                      }
                    }

                    //show treeview with types or files
                    function showRDFSTree(data, file, str) {
                      // set currentTreeData to RDFS data
                      if (data === RDFSData || data.length === 0) {
                        var viewData = RDFSData;
                        currentTreeData = RDFSData;
                      } else {
                        var viewData = data;
                        currentTreeData = data;
                      }
                      // check if typesRadio is checked and update current data
                      if (str) {
                        viewData = getViewDataBasedOnType(viewData, str);
                      }
                      // only one is checked but not both
                      if (isCheckedshowTypesCheckBox)
                        $('#showFilesCheckBox').prop('checked', false);
                      if (isCheckedshowFilesCheckBox)
                        $('#showTypesCheckBox').prop('checked', false);
                      var allParents = getUniqueParents(viewData);
                      var data = [];
                      var parentNodes = [];
                      if ($('#showFilesCheckBox').is(':checked')) {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].concept;
                          viewData[i].tags = ['<a  class="ui tiny pink tag label">' + viewData[i].fileName + '</a>'];
                        }
                        parentNodes = getParentWithChildren(viewData, allParents, 'fileTag');
                      } else if ($('#showTypesCheckBox').is(':checked')) {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].concept;
                          // check for multiple types
                          const allTypes = _(RDFSData)
                            .filter(o => {
                              return o.concept === viewData[i].concept
                            })
                            .map(o => {
                              return '<a  class="ui tiny teal tag label">' + o.RDFType + '</a>';
                            })
                            .valueOf();
                          var allUniqueTypes = allTypes;
                          viewData[i].tags = uniqueArray(allUniqueTypes, "RDFType");
                        }
                        parentNodes = getParentWithChildren(viewData, allParents, 'typeTag');
                      } else {
                        for (var i = 0; i < viewData.length; i++) {
                          viewData[i].text = viewData[i].concept;
                          viewData[i].tags = [''];
                        }
                        parentNodes = getParentWithChildren(viewData, allParents);
                      }
                      data = parentNodes;

                      if (file !== "ALL Files") {
                        currentTreeData = getRDFSFileData(data, file);
                        data = getRDFSFileData(data, file);
                      }
                      if (data) {
                        $('#notFoundMessage').hide();
                        $("#treeContainer").show();
                        $("#tree").show();
                      } else {
                        $("#treeContainer").hide();
                        $("#tree").hide();
                      } // make array unique
                      data = uniqueArray(data);
                      // update numbers of classes, properties, individual .. etc
                      updateTypeNumbers();
                      // sorting the tree before viewing
                      data.sort(function (a, b) {
                        if (a.text && b.text) {
                          return ((a.text.toLowerCase() == b.text.toLowerCase()) ? 0 : ((a.text.toLowerCase() > b
                              .text.toLowerCase()) ?
                            1 : -1));
                        }
                      });

                      newBuildTreeData = data;
                      // rebuild tree with the new data
                      buildTree(data);
                    }

                    // regenerate the tree according to the new data
                    function buildTree(data) {
                      $('#tree').treeview({
                        data: data, // data is not optional
                        levels: 5,
                        showTags: true,
                        enableLinks: true,
                        icon: "glyphicon glyphicon-chevron-right",
                        selectedIcon: "glyphicon glyphicon-chevron-right",
                        onNodeSelected: function (event, node) {
                          // catch the individuals if it has "subject" property
                          if (node.hasOwnProperty('subject')) {
                            event.stopPropagation();
                            $('#externalInfo').hide();
                            $('#infoDetails').show();
                            $('#viewList').show();
                            getConceptInfo(node.subjectURI, "Individuals");
                            showTurtleSource(node.subjectURI, "Individuals");
                            currentSelectedConcept = node.subject;
                            currentSelectedIndividualURI = node.subjectURI;
                          }
                          // child right now only a property for SKOS object
                          else if (node.hasOwnProperty('child')) {
                            var str;
                            currentSelectedSKOSURI = node.URI;
                            $('#externalInfo').hide();
                            // display infoTabs and graph and documentation
                            getConceptInfo(currentSelectedSKOSURI, "SKOS");
                            // show source code
                            showTurtleSource(currentSelectedSKOSURI, "SKOS");
                            $('#tree li').each(function () {
                              $(this).append('<div class="tag-cont"></div>');
                              $(this).find('.tag-cont').html($(this).find('.badge'));
                            });
                          } else {
                            if (node.concept) {
                              event.stopPropagation();
                              $('#externalInfo').hide();
                              $('#infoDetails').show();
                              $('#viewList').show();
                              getConceptInfo(node.concept);
                              showInstances(node.concept);
                              showTurtleSource(node.concept);
                              currentSelectedConcept = node.concept;
                            } //check for SKOS parents nodes
                            else if (node.hasOwnProperty('nodes')) {
                              if (node.nodes[0].hasOwnProperty('child')) {
                                currentSelectedSKOSURI = node.nodes[0].parentURI;
                                $('#externalInfo').hide();
                                // display infoTabs and graph and documentation
                                getConceptInfo(currentSelectedSKOSURI, "SKOS");
                                // show source code
                                showTurtleSource(currentSelectedSKOSURI, "SKOS");
                                $('#tree li').each(function () {
                                  $(this).append('<div class="tag-cont"></div>');
                                  $(this).find('.tag-cont').html($(this).find('.badge'));
                                });
                              } else if (isConceptInside(node.text)) { //check for RDFS parents nodes
                                event.stopPropagation();
                                $('#externalInfo').hide();
                                $('#infoDetails').show();
                                $('#viewList').show();
                                getConceptInfo(node.text);
                                showInstances(node.text);
                                showTurtleSource(node.text);
                                currentSelectedConcept = node.text;
                              }
                            } else if (isConceptInside(node.text)) //parent node inside our ontology
                            {
                              event.stopPropagation();
                              $('#externalInfo').hide();
                              $('#infoDetails').show();
                              $('#viewList').show();
                              getConceptInfo(node.text);
                              showInstances(node.text);
                              showTurtleSource(node.text);
                              currentSelectedConcept = node.text;
                            }
                          }
                        }
                      });
                    }

                    var isCheckedshowFilesCheckBox, isCheckedshowTypesCheckBox;
                    // check if showType or showfile checkboxes were clicked
                    $('input:checkbox')
                      .on('change', function (event) {
                        event.preventDefault();
                        var inputType = "";
                        inputType = getClickedTypeRadio();
                        isCheckedshowFilesCheckBox = ($(this).prop('checked') && $(this).attr('id') ==
                            'showFilesCheckBox') ?
                          true : false;
                        isCheckedshowTypesCheckBox = ($(this).prop('checked') && $(this).attr('id') ==
                            'showTypesCheckBox') ?
                          true : false;
                        if (($(this).prop('checked') || !$(this).prop('checked')) && $('#individualsPropertyRadio')
                          .is(':checked')) {
                          if ($('#input-search').val() !== "")
                            showIndividualTree(currentTreeData, currentSelectedFile);
                          else
                            showIndividualTree(individiualsData, currentSelectedFile);
                        } else if (($(this).prop('checked') || !$(this).prop('checked')) && $('#SKOSViewCheckBox').is(
                            ':checked')) {
                          if ($('#input-search').val() !== "") {
                            showSKOSTree(currentTreeData, currentSelectedFile);
                          } else
                            showSKOSTree(SKOSData, currentSelectedFile, currentSelectedRDFType);
                        } else if (($(this).prop('checked') || !$(this).prop('checked')) && $('#RDFSViewCheckBox').is(
                            ':checked')) {
                          if ($('#input-search').val() !== "") {
                            showRDFSTree(currentTreeData, currentSelectedFile);
                          } else {
                            showRDFSTree(RDFSData, currentSelectedFile, currentSelectedRDFType);
                          }
                        }
                      });

                    $('input:radio')
                      .on('change', function (event) {
                        event.preventDefault();
                        $('#input-search').val("");
                        var inputType = "";
                        inputType = getClickedTypeRadio();
                        $("#infoTabs").hide();
                        if ($('#individualsPropertyRadio').is(':checked')) {
                          $('#propertyTypeDropdown').removeClass("enabled");
                          $('#propertyTypeDropdown').addClass("disabled");
                          showIndividualTree(individiualsData, currentSelectedFile);
                        } else if ($('#SKOSViewCheckBox').is(':checked')) {
                          showSKOSTree(SKOSData, currentSelectedFile, inputType);
                        } else if ($('#RDFSViewCheckBox').is(':checked')) {
                          showRDFSTree(RDFSData, currentSelectedFile, inputType);
                        }
                      });

                    function getClickedTypeRadio() {
                      var type = "";
                      if ($('#classRadio').is(':checked')) {
                        type = "Class";
                        currentSelectedRDFType = "Class";
                        $('#propertyTypeDropdown').removeClass("enabled");
                        $('#propertyTypeDropdown').addClass("disabled");
                      } else if ($('#allTypesRadio').is(':checked')) {
                        currentSelectedRDFType = "";
                        $('#propertyTypeDropdown').removeClass("enabled");
                        $('#propertyTypeDropdown').addClass("disabled");
                      } else if ($('#propertyRadio').is(':checked')) {
                        //type = "Property";
                        if (!currentSelectedRDFType.includes("Property"))
                          type = currentSelectedRDFType = "Property";
                        $('#propertyTypeDropdown').removeClass("disabled");
                        $('#propertyTypeDropdown').addClass("enabled");
                      }
                      return type;
                    }

                    // filter based on property types
                    $('#propertyTypeDropdown')
                      .dropdown({
                        onChange: function (value) {
                          if (value == "object property")
                            type = currentSelectedRDFType = "ObjectProperty";
                          else if (value == "rdf property")
                            type = currentSelectedRDFType = "rdf:Property";
                          else if (value == "annotation property")
                            type = currentSelectedRDFType = "AnnotationProperty";
                          else if (value == "datatype property")
                            type = currentSelectedRDFType = "DatatypeProperty";
                          else
                            type = currentSelectedRDFType = "Property";

                          // build tree based on selected type
                          if ($('#SKOSViewCheckBox').is(':checked')) {
                            if ($('#input-search').val() !== "") {
                              showSKOSTree(currentTreeData, currentSelectedFile);
                            } else
                              showSKOSTree(SKOSData, currentSelectedFile, type);
                          } else if ($('#RDFSViewCheckBox').is(':checked')) {
                            if ($('#input-search').val() !== "")
                              showRDFSTree(currentTreeData, currentSelectedFile);
                            else
                              showRDFSTree(RDFSData, currentSelectedFile, type);
                          }
                        }
                      });

                    //show concept was not found as a message
                    function conceptNotFoundMessage() {
                      <% include notFoundMessage %> // import from notFoundMessage.ejs file
                    }

                    var search = function (e) {
                      var pattern = $('#input-search').val();
                      var ignoreCase = $('#chk-ignore-case').is(':checked');
                      var array = [];
                      // search pattern in individuals
                      if ($('#individualsPropertyRadio').is(':checked')) {
                        if (currentSelectedFile != "ALL Files") {
                          array = _.filter(individiualsData, function (o) {
                            if (o.fileName === currentSelectedFile)
                              return o;
                          });
                        } else {
                          array = individiualsData;
                        }
                        showIndividualTree(array, currentSelectedFile);
                        var result = $('#tree').treeview('search', [pattern, {
                          ignoreCase: ignoreCase, // case insensitive
                          exactMatch: false, // like or equals
                          revealResults: false, // reveal matching nodes
                        }]);
                        currentTreeData = result;
                        updateTypeNumbers(currentTreeData);
                        buildTree(result);
                      }
                      // search pattern in SKOS concepts
                      else if ($('#SKOSViewCheckBox').is(':checked')) {
                        if (currentSelectedFile != "ALL Files") {
                          array = _.filter(SKOSData, function (o) {
                            if (o.fileName === currentSelectedFile)
                              return o;
                          });
                        } else {
                          array = SKOSData;
                        }
                        // check if the RDF type is selected
                        if (currentSelectedRDFType)
                          showSKOSTree(array, currentSelectedFile, currentSelectedRDFType);
                        else
                          showSKOSTree(array, currentSelectedFile);
                        var result = $('#tree').treeview('search', [pattern, {
                          ignoreCase: ignoreCase, // case insensitive
                          exactMatch: false, // like or equals
                          revealResults: false, // reveal matching nodes
                        }]);
                        currentTreeData = result;
                        updateTypeNumbers();
                        buildTree(result);
                      }
                      // search pattern in RDFS concepts
                      else if ($('#RDFSViewCheckBox').is(':checked')) {
                        if (currentSelectedFile != "ALL Files") {
                          array = _.filter(RDFSData, function (o) {
                            if (o.fileName === currentSelectedFile)
                              return o;
                          });
                        } else {
                          array = RDFSData;
                        }
                        // check if the RDF type is selected
                        if (currentSelectedRDFType)
                          showRDFSTree(array, currentSelectedFile, currentSelectedRDFType);
                        else
                          showRDFSTree(array, currentSelectedFile);
                        var result = $("#tree").treeview('search', [pattern, {
                          ignoreCase: ignoreCase, // case insensitive
                          exactMatch: false, // like or equals
                          revealResults: false, // reveal matching nodes
                        }]);
                        currentTreeData = result;
                        updateTypeNumbers();
                        buildTree(result);
                      }
                      // if no result is returned with the searchString
                      if (result.length === 0 && $('#input-search').val() !== "") {
                        conceptNotFoundMessage();
                      } else if ($('#input-search').val() === "") {
                        $('#infoTabs').hide();
                        $('#tree').show();
                        if ($('#individualsPropertyRadio').is(':checked'))
                          showIndividualTree(array, currentSelectedFile);
                        else if ($('#RDFSViewCheckBox').is(':checked')) {
                          // check if the RDF type is selected
                          if (currentSelectedRDFType)
                            showRDFSTree(array, currentSelectedFile, currentSelectedRDFType);
                          else
                            showRDFSTree(array, currentSelectedFile);
                        } else {
                          // check if the RDF type is selected
                          if (currentSelectedRDFType)
                            showSKOSTree(array, currentSelectedFile, currentSelectedRDFType);
                          else
                            showSKOSTree(array, currentSelectedFile);
                        }
                        $('#notFoundMessage').html('');
                        $('#notFoundMessage').hide();
                      }
                    }

                    // check search input on keyup
                    $('#input-search').on('keyup', search);

                    // remove redundant parents from tree
                    function getUniqueParents(data) {
                      var out = [];
                      var unique = [...new Set(data.map(item => item.parent))];
                      unique.forEach(function (item) {
                        if (item)
                          out.push(item);
                      });
                      return out;
                    }

                    // get nodes which are parents and have children
                    function getParentWithChildren(data, allParents) {

                      if ($('#SKOSViewCheckBox').is(':checked')) {
                        var allChildren = $.grep(data, function (element) {
                          return element.child !== '';
                        });
                        var allChildrenArrary = _.map(allChildren, function (o) {
                          return o.child;
                        });
                        var allParents = $.grep(data, function (o) {
                          return !allChildrenArrary.includes(o.concept);
                        });
                      } else {
                        var allParents = $.grep(data, function (o) {
                          return o.parent === ''
                        });
                      }
                      var all = function (parentNode) {
                        child = $.grep(data, function (element) {
                          return element.parent == parentNode.concept
                        });
                        //TODO:
                        // if (child.length > 0)
                        //   parentNode.nodes = child;
                        // $(child).each(function() {
                        //   return all(this);
                        // });
                      }

                      $(allParents).each(function () {
                        all(this);
                      });
                      //debugger
                      return allParents;
                    }


                    // get RDFS elements of the tree to display  filtered by file
                    function getRDFSFileData(data, selectedFileName) {
                      var inputType = getClickedTypeRadio();
                      var viewData = [];
                      viewData = getViewDataBasedOnType(data, inputType);
                      if (selectedFileName) {
                        var filteredData = [];
                        var k = 0;
                        for (var i = 0; i < viewData.length; i++) {
                          if (viewData[i].hasOwnProperty('fileName')) {
                            if (viewData[i].fileName.trim() === selectedFileName) {
                              filteredData[k] = viewData[i];
                              k++;
                            }
                          }
                        }
                      }
                      var allParentsFromFiles = getUniqueParents(filteredData);
                      var dataFile = [];

                      if ($('#showTypesCheckBox').is(':checked')) {
                        for (var i = 0; i < filteredData.length; i++) {
                          filteredData[i].text = filteredData[i].concept;
                          filteredData[i].tags = ['<a  class="ui tiny teal tag label">' + filteredData[i].RDFType +
                            '</a>'
                          ];
                        }
                        dataFile = getParentWithChildren(filteredData, allParentsFromFiles, 'typeTag');
                      } else if ($('#showFilesCheckBox').is(':checked')) {
                        for (var i = 0; i < filteredData.length; i++) {
                          filteredData[i].text = filteredData[i].concept;
                          filteredData[i].tags = ['<a  class="ui tiny pink tag label">' + filteredData[i].fileName +
                            '</a>'
                          ];
                        }
                        dataFile = getParentWithChildren(filteredData, allParentsFromFiles, 'fileTag');
                      } else {
                        for (var i = 0; i < filteredData.length; i++) {
                          filteredData[i].text = filteredData[i].concept;
                          filteredData[i].tags = [''];
                        }
                        dataFile = getParentWithChildren(filteredData, allParentsFromFiles);
                      }
                      return dataFile;
                    }

                    // get SKOS elements of the tree to display filtered by file
                    function getSKOSFileData(result, selectedFileName) {
                      var data = result;
                      var filteredData = [];
                      var k = 0;
                      if (selectedFileName) {
                        for (var i = 0; i < data.length; i++) {
                          if (data[i].hasOwnProperty('nodes')) {
                            for (var j = 0; j < data[i].nodes.length; j++)
                              if (data[i].nodes[j]['fileName'].trim() === selectedFileName) {
                                filteredData[k] = data[i];
                                k++;
                              }
                          } else {
                            if (data[i]['fileName'].trim() === selectedFileName) {
                              filteredData[k] = data[i];
                              k++;
                            }
                          }
                        }
                      }
                      return filteredData;
                    }

                    // get Individuals of the tree to display filtered by file
                    function getIndividualsFileData(result, selectedFileName) {
                      if (selectedFileName) {
                        var filteredData = [];
                        var k = 0;
                        for (var i = 0; i < result.length; i++) {
                          if (result[i].hasOwnProperty('fileName')) {
                            if (result[i].fileName.trim() === selectedFileName) {
                              filteredData[k] = result[i];
                              k++;
                            }
                          }
                        }
                      }
                      return filteredData;
                    }

                    // Get the word after slash char of a string
                    function trimSlash(str) {
                      if (str.includes("/")) {
                        var n = str.split("/").pop(-1);;
                        return n;
                      } else {
                        return str;
                      }
                    }

                    // Get the word after hash char of a string
                    function trimHash(str) {
                      if (str.includes("#")) {
                        var n = str.split('#');;
                        var p = n[n.length - 1];
                        return p;
                      } else {
                        return str;
                      }
                    }

                    function trimInstance(URI) {
                      var conceptArray = [];
                      var conceptTrimmed = "";
                      if (URI.endsWith("/"))
                        URI = URI.substring(0, URI.length - 1);
                      if (URI.includes("/")) {
                        conceptArray = URI.split("/");
                        if (conceptArray != null && conceptArray.length > 0) {
                          conceptTrimmed = conceptArray[conceptArray.length - 1];
                        }
                      }
                      if (conceptTrimmed.includes("#")) {
                        conceptArray = URI.split("#");
                        if (conceptArray != null && conceptArray.length > 0) {
                          conceptTrimmed = conceptArray[conceptArray.length - 1];
                        }
                      }
                      return conceptTrimmed;
                    }

                    // Customization of the RDF type to show as in standards
                    function replaceWithRDFType(str) {
                      if (str.includes("22-rdf-syntax-ns")) {
                        return "rdf:" + trimHash(str);
                      } else if (str.includes('rdf-schema'))
                        return "rdfs:" + trimHash(str);
                      else if (str.includes('owl'))
                        return "owl:" + trimHash(str);
                      else if (str.includes('core#Concept') || str.includes('narrower') || str.includes('broader'))
                        return "skos:" + trimHash(str);
                      else
                        return str;
                    }

                    //check if concept is OWLIndividiual
                    function isOWLIndividiual(str) {
                      if (individiualsData.length > 0)
                        if (individiualsData.find(x => x.subject === str)) {
                          return true;
                        }

                      return false;
                    }

                    // check if the concept is external
                    function isConceptExternal(str) {
                      var externalConcepts = getExternalsConcepts();
                      for (var i = 0; i < externalConcepts.length; i++) {
                        if (str === externalConcepts[i]) {
                          return true;
                        }
                      }
                      return false;
                    }

                    //check if concept is in our ontology or external
                    function isConceptInside(str) {
                      if ($('#SKOSViewCheckBox').is(':checked')) {
                        if (SKOSData.find(x => x.child === str) || SKOSData.find(x => x.parent === str)) {
                          return true;
                        }
                      } else if ($('#RDFSViewCheckBox').is(':checked')) {
                        if (RDFSData.find(x => x.concept === str)) {
                          return true;
                        }
                      }
                      return false;
                    }

                    // get externalURI
                    function getExternalURI(str) {
                      var array = [];
                      if ($('#SKOSViewCheckBox').is(':checked')) {
                        array = SKOSObjPlusURI;
                      } else if ($('#RDFSViewCheckBox').is(':checked')) {
                        array = RDFObjPlusURI;
                      }
                      for (var i = 0; i < array.length; i++) {
                        if (str === array[i].object)
                          return array[i].URI;
                      }
                      return;
                    }

                    // get selected fileNames for dropDownMenu and rebuild treeview
                    function getSelectedFileName() {
                      var selectedFileName = $('#filesDroplist').dropdown('get text');
                      selectedFileName = selectedFileName.trim();
                      if (selectedFileName != "Choose File") {
                        $('#infoTabs').hide(); //hide previos infoTabs
                        if (selectedFileName === "ALL Files") {
                          if ($('#individualsPropertyRadio').is(':checked')) {
                            $('#infoTabs').hide(); //hide previos infoTabs
                            showIndividualTree(individiualsData, "ALL Files");
                          } else if ($('#SKOSViewCheckBox').is(':checked')) {
                            showSKOSTree(SKOSData, "ALL Files");
                          } else if ($('#RDFSViewCheckBox').is(':checked')) {
                            showRDFSTree(RDFSData, "ALL Files");
                          }
                          currentSelectedFile = "ALL Files";
                        } else {
                          if (selectedFileName.includes("/"))
                            selectedFileName = selectedFileName.slice(selectedFileName.lastIndexOf("/") + 1,
                              selectedFileName.length);
                          currentSelectedFile = selectedFileName;
                          if ($('#individualsPropertyRadio').is(':checked')) {
                            $('#infoTabs').hide(); //hide previos infoTabs
                            currentTreeData = individiualsData;
                            showIndividualTree(individiualsData, selectedFileName);
                          } else if ($('#SKOSViewCheckBox').is(':checked')) {
                            currentTreeData = SKOSData;
                            $('#infoTabs').hide(); //hide previos infoTabs
                            showSKOSTree(SKOSData, selectedFileName);
                          } else {
                            $('#infoTabs').hide(); //hide previos infoTabs
                            currentTreeData = RDFSData;
                            showRDFSTree(RDFSData, selectedFileName);
                          }
                        }
                        // update numbers of classes, properties, individual .. etc
                        updateTypeNumbers();
                      }

                    }

                    // show info. details of clicked instance
                    function showInstanceDetails(instanceURI) {
                      var endpoint = "./../../fuseki/dataset/sparql?query=";
                      var querystring = 'SELECT  ?p ?o ' + fromInQueryWithoutNamed + '  WHERE {  <' + instanceURI +
                        '> ?p ?o }';
                      $.ajax({
                        type: 'POST',
                        data: {
                          query: encodeURIComponent(querystring)
                        },
                        url: './../../sparqlServer/query',
                        //type: 'GET',
                        //url: endpoint + encodeURIComponent(querystring),
                        // headers: {
                        //   Accept: 'application/sparql-results+json;charset=UTF-8'
                        // },
                        success: function (data, textStatus, jqXHR) {
                          var instances = JSON.parse(data).results.bindings;
                          if (instances[0] != null) {
                            var instancesDetailsTable =
                              '<table class="ui blue celled table" style="table-layout:fixed;>' +
                              '<thead><tr class="info">' +
                              '<th>Predicate</th>' +
                              '<th>Object</th>' +
                              '</tr></thead>';
                            for (var i = 0; i < instances.length; i++) {
                              var key1 = instances[i]['p'].value;
                              var key2 = instances[i]['o'].value;
                              var key2URI = key2;
                              var key3 = instances[i]['o']['xml:lang'];
                              var key4 = instances[i]['o']['type'];

                              //check if object is uri end with "/"
                              if ((key2.includes("http://") || key2.includes("https://")) && key4 === "literal") {
                                if (key2[key2.length - 1] === ('/'))
                                  key2 = key2.slice(0, -1);
                                key2 = '<a href=' + key2 + '>' + key2 + '</a>';
                                key1 = trimHash(replaceWithRDFType(trimSlash(instances[i]['p'].value)));
                              } else {
                                key1 = trimHash(replaceWithRDFType(trimSlash(instances[i]['p'].value)));
                                key2 = trimHash(replaceWithRDFType(trimSlash(instances[i]['o'].value)));
                              }

                              if (key1.includes("broader") || key1.includes("narrower")) {
                                key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2URI +
                                  '&quot;,&quot;SKOS&quot;); return false; ">' + key2 + '</a>';
                              }
                              if (isConceptExternal(key2) && !key1.includes("label") && key4 === "uri") {
                                key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 +
                                  '&quot;); return false; ">' + key2 + '</a>';
                              }
                              if (isOWLIndividiual(key2) && !key1.includes("label") && key4 === "uri") {
                                key2 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + key2URI +
                                  '&quot;); return false; ">' + key2 + '</a>';
                              }
                              if (isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
                                key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2 +
                                  '&quot;); return false; ">' +
                                  key2 + '</a>';
                              }
                              if (key3 && key4 === "literal") {
                                key2 = key2 + '@' + key3;
                              }
                              instancesDetailsTable += '<tr><td>' + key1 + '</td>    <td>' + key2 +
                                '</td>  </tr>';
                            }
                            instancesDetailsTable += '</table> ';
                            $("#instanceHead").show();
                            $("#instanceHead").html('<h3> Individual: <code>' + trimHash(replaceWithRDFType(
                              trimSlash(
                                instanceURI))) + '</code></h3>');
                            $("#instanceDetailsTable").show();
                            $("#instanceDetailsTable").html(instancesDetailsTable);
                            document.getElementById("instanceHead").scrollIntoView()

                          } else {
                            $("#instanceHead").hide();
                            $("#instanceDetailsTable").hide();
                          }
                        }
                      });
                    }

                    // To display instances of  the selected node
                    function showInstances(item) {
                      var conceptURI;
                      var isURIExist = false;
                      var data = [];
                      if ($('#SKOSViewCheckBox').is(':checked'))
                        data = SKOSData;
                      else
                        data = RDFSData;
                      if (item) {
                        for (var i = 0; i < data.length; i++) {
                          if (item.toLowerCase() === data[i].concept.toLowerCase()) {
                            conceptURI = data[i].URI;
                            isURIExist = true;
                            break;
                          }
                        }
                        if (isURIExist) {
                          var endpoint = "./../../fuseki/dataset/sparql?query=";
                          var querystring = 'SELECT  ?s ' + fromInQueryWithoutNamed + ' WHERE { ?s  a <' + conceptURI +
                            '> }';
                          $.ajax({
                            type: 'POST',
                            data: {
                              query: encodeURIComponent(querystring)
                            },
                            url: './../../sparqlServer/query',
                            //type: 'GET',
                            //url: endpoint + encodeURIComponent(querystring),
                            // headers: {
                            //   Accept: 'application/sparql-results+json;charset=UTF-8'
                            // },
                            success: function (data, textStatus, jqXHR) {
                              var instances = JSON.parse(data).results.bindings;
                              if (instances[0] != null) {
                                var instancesTable = '<table class="ui red table" style="table-layout:fixed;>' +
                                  '<colgroup> <col class="col-md-4"> </colgroup>' +
                                  '<tr>' +
                                  '<th>Individuals</th>' +
                                  '</tr>';
                                for (var i = 0; i < instances.length; i++) {
                                  var instanceURI = instances[i]["s"].value;
                                  var key1 = trimHash(trimSlash(instances[i]["s"].value));
                                  key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI +
                                    '&quot;); return false; ">' + key1 + '</a>';
                                  instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                                }
                                instancesTable += '</table> ';
                                $("#instancesTable").show();
                                $("#instancesTable").html(instancesTable);
                              } else {
                                $("#instancesTable").html("");
                                $("#instancesTable").hide();
                                $("#instanceHead").hide();
                                $("#instanceDetailsTable").hide();
                              }
                            }
                          });
                        }
                      }
                    }

                    // show other serialization formats if the user selects them
                    // if (serializations) {
                    //     for (let i in serializations) {
                    //       if (serializations[i] == 'JSON-LD')
                    //         $("#ldJsonCodeBnt").show();
                    //       if (serializations[i] == 'RDF-XML')
                    //         $("#rdfxmlCodeBnt").show();
                    //   }
                    // }

                    var acceptHeader4SourceCode = "text/turtle";
                    // set Accept Header based on clicked button to show with the clicked option
                    $("#turtleCodeBnt,#rdfxmlCodeBnt,#ldJsonCodeBnt").on('click', function (event) {
                      event.preventDefault();
                      acceptHeader4SourceCode = this.value;
                      if ($('#individualsPropertyRadio').is(':checked'))
                        showTurtleSource(currentSelectedIndividualURI, "Individuals");
                      else if ($('#SKOSViewCheckBox').is(':checked')) {
                        if (justOneTimeExectuted)
                          showTurtleSource(currentSelectedSKOSURI, "SKOS", "queryAsObject");
                        else
                          showTurtleSource(currentSelectedSKOSURI, "SKOS");
                      } else if ($('#RDFSViewCheckBox').is(':checked')) {
                        showTurtleSource(currentSelectedConcept);
                      }
                    });



                    // To display Turtle source for the selected node
                    function showTurtleSource(item, view, anotherQuery) {
                      var conceptURI;
                      var isURIExist = false;
                      if (view == "SKOS" || view == "Individuals") {
                        conceptURI = item;
                        isURIExist = true;
                      } else {
                        if (item) {
                          for (var i = 0; i < RDFSData.length; i++) {
                            if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                              conceptURI = RDFSData[i].URI;
                              isURIExist = true;
                              break;
                            }
                          }
                        } else if (currentSelectedConcept) {
                          for (var i = 0; i < RDFSData.length; i++) {
                            if (currentSelectedConcept.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                              conceptURI = RDFSData[i].URI;
                              isURIExist = true;
                              break;
                            }
                          }
                        } else
                          isURIExist = false;
                      }
                      if (isURIExist) {
                        var endpoint = "./../../fuseki/dataset/sparql?query="
                        if (!anotherQuery)
                          var querystring = 'CONSTRUCT{<' + conceptURI + '> ?p ?o .} ' + fromInQueryWithoutNamed +
                            ' WHERE {<' +
                            conceptURI + '> ?p ?o .}';
                        else
                          var querystring = 'CONSTRUCT{ ?s ?p <' + conceptURI + '> .} ' + fromInQueryWithoutNamed +
                            ' WHERE { ?s ?p <' + conceptURI + '> .}';
                        $('div.yasqe').empty();
                        $.ajax({
                          type: 'POST',
                          data: {
                            query: encodeURIComponent(querystring)
                          },
                          url: './../../sparqlServer/construct?'+acceptHeader4SourceCode,
                          //type: 'GET',
                          //url: endpoint + encodeURIComponent(querystring),
                          // headers: {
                          //   "Accept": acceptHeader4SourceCode,
                          //   "Access-Control-Allow-Origin": "*",
                          //   "Access-Control-Allow-Headers": "Origin, X-Requested-With, Content-Type, Accept",
                          // },
                          success: function (data, textStatus, jqXHR) {
                            $('#sourceCodeTab').show();
                            $('div.yasqe').remove();
                            var config = {
                              createShareLink: false,
                              readOnly: true,
                              syntaxErrorCheck: false,
                              lineNumbers: false
                            };
                            if (acceptHeader4SourceCode == "text/turtle") {
                              $("#jsonCodeDiv").hide();
                              $("#xmlCodeDiv").hide();
                              $("#yasqe").show();
                              // use yasqe library to display turtle format
                              var yasqe = YASQE(document.getElementById("yasqe"), config);
                              $("div.CodeMirror-gutters").remove();
                              $("div.yasqe_buttons").remove();
                              yasqe.setValue(data);
                              $("div.yasqe").transition('pulse');
                            } else {
                              hljs.initHighlightingOnLoad();
                              if (acceptHeader4SourceCode == "application/ld+json") {
                                $("#jsonCodeDiv").show();
                                $("#xmlCodeDiv").hide();
                                $("#yasqe").hide();
                                var myCodeMirror = YASQE(document.getElementById("jsonCode"), {
                                value: data,
                                mode:  "javascript"
                                });
                                $("div.CodeMirror-gutters").remove();
                                $("div.yasqe_buttons").remove();
                                //$("#jsonCode").text(data);
                                $("jsonCode").transition('pulse');
                              } else {
                                $("#xmlCodeDiv").show();
                                $("#jsonCodeDiv").hide();
                                $("#yasqe").hide();
                                var myCodeMirror = YASQE(document.getElementById("xmlCode"), {
                                value: data,
                                mode:  "XML/HTML"
                                });
                                $("div.CodeMirror-gutters").remove();
                                $("div.yasqe_buttons").remove();
                                $("#xmlCode").transition('pulse');

                              }
                            }
                          },
                          error: function (e) {
                            console.log(e);
                          }
                        });
                      }
                    }

                    // call to showTurtleSource to display the turtle format
                    // when checkbox is clicked
                    $("#sourceCodeTab").on('click', function () {
                      if ($('#individualsPropertyRadio').is(':checked'))
                        showTurtleSource(currentSelectedIndividualURI, "Individuals");
                      else if ($('#SKOSViewCheckBox').is(':checked')) {
                        if (justOneTimeExectuted)
                          showTurtleSource(currentSelectedSKOSURI, "SKOS", "queryAsObject");
                        else
                          showTurtleSource(currentSelectedSKOSURI, "SKOS");
                      } else if ($('#RDFSViewCheckBox').is(':checked')) {
                        showTurtleSource(currentSelectedConcept);
                      }
                    });

                    //check if concept used either as domain or range by other conceptsget
                    function getValuesUseditAsProperty(conceptURI, type) {
                      var hasdomainPropertyValues = false;
                      var hasRangePropertyValues = false;

                      // make both rangePropertyTable and domainPropertyTable  empty
                      $("#rangePropertyTable").hide();
                      $("#domainPropertyTable").hide();
                      if (type === "range") {
                        var propertyType = "rdfs:range";
                      } else {
                        var propertyType = "rdfs:domain";
                      }
                      var endpoint = "./../../fuseki/dataset/sparql?query=";
                      var querystring = 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>' +
                        'SELECT  ?s ?property ?comment  ' +
                        fromInQueryWithoutNamed +
                        '  WHERE {' +
                        ' ?s ' + propertyType + ' <' + conceptURI + '>.' +
                        '?s ' + propertyType + '?property.' +
                        'OPTIONAL{?s rdfs:comment ?comment.}}';
                      $.ajax({
                        type: 'POST',
                        data: {
                          query: encodeURIComponent(querystring)
                        },
                        url: './../../sparqlServer/query',
                        //type: 'GET',
                        //url: endpoint + encodeURIComponent(querystring),
                        'async': true,
                        // headers: {
                        //   Accept: 'application/sparql-results+json;charset=UTF-8'
                        // },
                        success: function (data, textStatus, jqXHR) {
                          var result = JSON.parse(data).results.bindings;
                          hasdomainPropertyValues = false;
                          hasRangePropertyValues = false;

                          if (result[0] != null) {
                            var rangePropertyTable =
                              '<table class="ui yellow celled table" style="table-layout:fixed;" >' +
                              '<thead>' +
                              '<colgroup> <col class="col-md-2"><col class="col-md-2"><col class="col-md-2"> </colgroup>' +
                              '<tr>' +
                              '<th colspan="3">Terms use it as range</th></thead>' +
                              '<tbody></tr><tr><th>Property</th><th>On Types</th><th>Description</th></tr>';

                            var domainPropertyTable =
                              '<table class="ui brown celled striped table"style="table-layout:fixed;" >' +
                              '<thead>' +
                              '<colgroup> <col class="col-md-2"><col class="col-md-2"><col class="col-md-2"> </colgroup>' +
                              '<tr>' +
                              '<th colspan="3">Terms use it as domain</th></thead>' +
                              '<tbody></tr><tr><th>Property</th><th>Expected Type</th><th>Description</th></tr>';
                            var perviousKey1DomainProperty = "",
                              perviousKey2DomainProperty = "";
                            if (type === 'domain') {
                              var domianPropertyResult = result;
                              if (domianPropertyResult) {
                                hasdomainPropertyValues = true;
                                for (var i = 0; i < domianPropertyResult.length; i++) {
                                  var key1 = trimHash(replaceWithRDFType(trimSlash(domianPropertyResult[i]['s']
                                    .value)));
                                  var key2 = trimHash(replaceWithRDFType(trimSlash(domianPropertyResult[i][
                                    'property'
                                  ].value)));
                                  var key3 = "";
                                  if (domianPropertyResult[i].hasOwnProperty("comment"))
                                    key3 = domianPropertyResult[i]['comment'].value;
                                  var key4 = "";
                                  if (domianPropertyResult[i]['comment'].hasOwnProperty("xml:lang"))
                                    key4 = domianPropertyResult[i]['comment']['xml:lang'];

                                  var key5 = domianPropertyResult[i]['comment']['type'];
                                  if (isConceptInside(key1) && domianPropertyResult[i]['s'].type === "uri")
                                    key1 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key1 +
                                    '&quot;); return false; ">' + key1 + '</a>';
                                  if (isConceptInside(key2) && domianPropertyResult[i]['property'].type === "uri")
                                    key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2 +
                                    '&quot;); return false; ">' + key2 + '</a>';
                                  // check if rows share same values of subject and property, then combine the last comment in the same table cell
                                  if (perviousKey1DomainProperty === key1 && perviousKey2DomainProperty ===
                                    key2 && key4 &&
                                    key5 === "literal") {
                                    domainPropertyTable = domainPropertyTable.substring(0, domainPropertyTable
                                      .lastIndexOf(
                                        '</td> </tr>'))
                                    domainPropertyTable += '<br/><br/>' + key3 + '@' + key4 + '</td> </tr>';
                                  } else if (perviousKey1DomainProperty === key1 && perviousKey2DomainProperty ===
                                    key2) {
                                    domainPropertyTable = domainPropertyTable.substring(0, domainPropertyTable
                                      .lastIndexOf(
                                        '</td> </tr>'))
                                    domainPropertyTable += '<br/><br/>' + key3 + '</td> </tr>';
                                  } else if (key4 && key5 === "literal")
                                    domainPropertyTable += '<tr><td style="vertical-align:middle;">' + key1 +
                                    '</td>    <td style="vertical-align:middle; text-align: center;">' + key2 +
                                    '</td>   <td>' + key3 + '@' + key4 + '</td> </tr>';
                                  else
                                    domainPropertyTable += '<tr><td style="vertical-align:middle;">' + key1 +
                                    '</td>    <td style="vertical-align:middle; text-align: center;">' + key2 +
                                    '</td>   <td>' + key3 + '</td> </tr>';
                                  //save pervious values of key1 and key2
                                  perviousKey1DomainProperty = key1;
                                  perviousKey2DomainProperty = key2;

                                }
                              }
                            } else if (type === 'range') {
                              var rangePropertyResult = result;
                              var perviousKey1RangeProperty = "",
                                perviousKey2RangeProperty = "";
                              if (rangePropertyResult) {
                                hasRangePropertyValues = true;
                                for (var i = 0; i < rangePropertyResult.length; i++) {
                                  var key1 = trimHash(replaceWithRDFType(trimSlash(rangePropertyResult[i]['s']
                                    .value)));
                                  var key2 = trimHash(replaceWithRDFType(trimSlash(rangePropertyResult[i][
                                    'property'
                                  ].value)));
                                  var key3 = "";
                                  if (rangePropertyResult[i].hasOwnProperty("comment"))
                                    key3 = rangePropertyResult[i]['comment'].value;
                                  var key4 = "";
                                  if (rangePropertyResult[i]['comment'].hasOwnProperty("xml:lang"))
                                    key4 = rangePropertyResult[i]['comment']['xml:lang'];
                                  var key5 = rangePropertyResult[i]['comment']['type'];

                                  if (isConceptInside(key1) && rangePropertyResult[i]['s'].type === "uri")
                                    key1 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key1 +
                                    '&quot;); return false; ">' + key1 + '</a>';
                                  if (isConceptInside(key2) && rangePropertyResult[i]['property'].type === "uri")
                                    key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2 +
                                    '&quot;); return false; ">' + key2 + '</a>';
                                  // check if rows share same values of subject and property, then combine the last comment in the same table cell
                                  if (perviousKey1RangeProperty === key1 && perviousKey2RangeProperty === key2 &&
                                    key4 &&
                                    key5 === "literal") {
                                    rangePropertyTable = rangePropertyTable.substring(0, rangePropertyTable
                                      .lastIndexOf(
                                        '</td> </tr>'))
                                    rangePropertyTable += '<br/><br/>' + key3 + '@' + key4 + '</td> </tr>';
                                  } else if (perviousKey1RangeProperty === key1 && perviousKey2RangeProperty ===
                                    key2) {
                                    rangePropertyTable = rangePropertyTable.substring(0, rangePropertyTable
                                      .lastIndexOf(
                                        '</td> </tr>'))
                                    rangePropertyTable += '<br/><br/>' + key3 + '</td> </tr>';
                                  } else if (key4 && key5 === "literal")
                                    rangePropertyTable += '<tr ><td style="vertical-align:middle;">' + key1 +
                                    '</td>    <td style="vertical-align:middle; text-align: center;">' + key2 +
                                    '</td>   <td>' + key3 + '@' + key4 + '</td> </tr>';
                                  else
                                    rangePropertyTable += '<tr><td style="vertical-align:middle;">' + key1 +
                                    '</td>    <td style="vertical-align:middle; text-align: center;">' + key2 +
                                    '</td>   <td>' + key3 + '</td> </tr>';

                                  perviousKey1RangeProperty = key1;
                                  perviousKey2RangeProperty = key2;
                                }
                              }
                            }
                            domainPropertyTable += '</tbody></table> ';
                            rangePropertyTable += '</tbody></table> ';
                            // show domainPropertyTable if it has Values
                            if (hasdomainPropertyValues) {
                              $("#domainPropertyTable").show();
                              $("#domainPropertyTable").html(domainPropertyTable);
                            }
                            // show rangePropertyTable if it has Values
                            if (hasRangePropertyValues) {
                              $("#rangePropertyTable").show();
                              $("#rangePropertyTable").html(rangePropertyTable);
                            }
                          }
                        }
                      });
                    };


                    // to query sparql endpoint return graph and queryResult
                    function getConceptInfo(item, view, anotherQuery) {
                      var str = "";
                      var isURIExist = false;
                      var conceptURI;
                      currentSelectedConcept = item;

                      if (view === "SKOS") {
                        conceptURI = item;
                        isURIExist = true;
                      } else if (view === "Individuals") {
                        conceptURI = item;
                        isURIExist = true;
                      } else {
                        for (var i = 0; i < RDFSData.length; i++) {
                          if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                            conceptURI = RDFSData[i].URI;
                            isURIExist = true;
                            break;
                          }
                        }
                      }
                      // highlight the selected node
                      var selectedNode = $('#tree').treeview('getSelected');
                      if (view === "SKOS" || view === "Individuals") {
                        //scrollTop if class clicked from instanceDetailsTable
                        $("#infoTabs").animate({
                          scrollTop: 0
                        }, "fast");
                        $("#instanceHead").hide();
                        $("#instanceDetailsTable").hide();
                        $("#instancesTable").hide();

                        // scroll to the clicked node from documentation and select the node
                        const callback = element => element.innerHTML == trimHash(replaceWithRDFType(trimSlash(item)));
                        const elements = Array.from(document.getElementsByTagName('a'));
                        const result = elements.filter(callback);
                        var $s = $('#treeContainer');
                        //  get nodeid of string node.text
                        var liTop = $s.find('[data-nodeid=' + parseInt(result["0"].firstChild.parentNode.offsetParent
                            .dataset.nodeid) +
                          ']').offset().top;
                        var ulTop = $s.offset().top;
                        // scroll to the selected node
                        //  $s.scrollTop($s.scrollTop() + (liTop - ulTop));
                        // select the node of the treeview
                        $('#tree').treeview('selectNode', [parseInt(result["0"].firstChild.parentNode.offsetParent
                            .dataset.nodeid),
                          {
                            silent: true
                          }
                        ]);
                      } else if (selectedNode[0].concept != item) {

                        if (!$('#allTypesRadio').is(':checked'))
                          //$('#allTypesRadio').click();
                          $('#allTypesRadio').click();;

                        //scrollTop if class clicked from instanceDetailsTable
                        $("#infoTabs").animate({
                          scrollTop: 0
                        }, "fast");
                        $("#instanceHead").hide();
                        $("#instanceDetailsTable").hide();
                        $("#instancesTable").hide();
                        // scroll to the clicked node from documentation and select the node
                        const callback = element => element.innerHTML == item;
                        const elements = Array.from(document.getElementsByTagName('a'));
                        const result = elements.filter(callback);
                        var $s = $('#treeContainer');
                        //  get nodeid of string node.text
                        var liTop = $s.find('[data-nodeid=' + parseInt(result[0].parentNode.dataset.nodeid) + ']')
                          .offset().top;
                        var ulTop = $s.offset().top;
                        // scroll to the selected node
                        $s.scrollTop($s.scrollTop() + (liTop - ulTop));
                        // select the node of the treeview
                        $('#tree').treeview('selectNode', [parseInt(result[0].parentNode.dataset.nodeid), {
                          silent: true
                        }]);
                      }

                      if (isURIExist) {
                        var endpoint = "./../../fuseki/dataset/sparql"
                        if (!anotherQuery)
                          var sparql = 'SELECT ?p ?o ' + fromInQueryWithoutNamed + '  WHERE {  <' + conceptURI +
                            '> ?p ?o }'
                        else
                          var sparql = 'SELECT ?o ?p ' + fromInQueryWithoutNamed + '  WHERE { ?o ?p <' + conceptURI +
                            '> }'

                        // MAKING CONSTANT ERRORS
                        d3sparql.query(endpoint, sparql, render);

                        $.ajax({
                          type: 'POST',
                          data: {
                            query: encodeURIComponent(sparql)
                          },
                          url: './../../sparqlServer/query',
                          //type: 'GET',
                          //url: endpoint + escape(currentQueryString),
                          // headers: {
                          //   Accept: 'application/sparql-results+json;charset=UTF-8'
                          // },
                          success: function (data, response, jqXHR) {
                            var result = JSON.parse(data)
                            if (result != null) {
                              render(result, sparql)
                            }
                          }
                        });

                      }
                    }

                    var justOneTimeExectuted = false;

                    // Function to display data in tables on the page
                    function render(json, vocoldoco_query=null) {
                      
                      // Adding the current concepts name on editing modal
                      item_name = currentSelectedConcept;
                      if (item_name.includes("http://") || item_name.includes(
                          "https://")) { //check if it skosURI
                        item_name = trimHash(trimSlash(item_name));
                      }
                      $(".header.editHeader").text(item_name);

                      // added by zaib
                      is_subject_edit = false;
                      is_spo_edit = false;
                      global_var_rdf_arr = json.results.bindings;
                      global_var_query = vocoldoco_query;

                      var objectOrSubject = "Object";
                      var dataSPARQL = json.results.bindings;
                      // check for spec case of skos concepts
                      if (dataSPARQL.length === 0 && $('#SKOSViewCheckBox').is(':checked')) {
                        getConceptInfo(currentSelectedSKOSURI, "SKOS", "queryAsObject");
                        showTurtleSource(currentSelectedSKOSURI, "SKOS", "queryAsObject", false);
                        justOneTimeExectuted = true;
                      } else {
                        if (justOneTimeExectuted)
                          objectOrSubject = "Subject";
                        if (justOneTimeExectuted && objectOrSubject === "Subject")
                          justOneTimeExectuted = false;

                        // needed local variables
                        var conceptHasRange = "";
                        var conceptHasDomain = "";
                        var conceptLabel;
                        var nodes = [],
                          edges = [];
                        var table = '<table class="ui green celled striped table" style="table-layout:fixed;">' +
                          '<colgroup> <col class="col-md-auto"><col class="col-md-7"> </colgroup>' +
                          '<tr class="positive">' +
                          '<th>Predicate</th>' +
                          '<th>' + objectOrSubject + '</th>' +
                          '<th>Edit</th>' +
                          '</tr>';
                        var rangeTable = '<table class="ui yellow celled striped table" style="table-layout:fixed;" >' +
                          '<colgroup> <col class="col-md-6"> </colgroup>' +
                          '<tr class="warning">' +
                          '<th>Values expected to be one of these types</th>' +
                          '</tr>';
                        var domainTable = '<table class="ui brown celled striped table" style="table-layout:fixed;">' +
                          '<colgroup> <col class="col-md-6"> </colgroup>' +
                          '<tr class="negative">' +
                          '<th>Used on these types</th>' +
                          '</tr>';

                        console.log(dataSPARQL)

                        for (var i = 0; i < dataSPARQL.length; i++) {
                          var key1 = trimHash(replaceWithRDFType(trimSlash(dataSPARQL[i]['p'].value)));
                          var key2 = dataSPARQL[i]['o'].value;
                          var key2URI = key2;
                          var key3 = "";

                          var predicate_value = dataSPARQL[i]['p'].value
                          var obj_value = dataSPARQL[i]['o'].value

                          // key1     =  predicate part 
                          // key2     =  object part
                          // key2URI  =  url to the object
                          // key3     =  language of literal
                          // key4     =  type of object ?

<<<<<<< HEAD



=======
>>>>>>> 1fcbc8957db1271b8c323fa2d97189eb0a919291
                          if (dataSPARQL[i]['o'].hasOwnProperty("xml:lang"))
                            key3 = dataSPARQL[i]['o']['xml:lang'];

                          var key4 = dataSPARQL[i]['o']['type'];

                          // remove "/" if end in "/"
                          if (key2[key2.length - 1] === ('/'))
                              key2 = key2.slice(0, -1);

                          // make object part a link if it's an URL
                          if ((key2.includes("http://") || key2.includes("https://")) && key4 === "literal") {
                            key2 = '<a href=' + key2 + '>' + key2 + '</a>';
                          } else {
                            key2 = trimHash(replaceWithRDFType(trimSlash(key2)));
                          }

                          // create an array with nodes for graph visualization
                          if (key3) {
                            nodes.push({
                              id: i + 2,
                              label: key2 + "@" + key3
                            });
                          } else {
                            nodes.push({
                              id: i + 2,
                              label: key2
                            });
                          }

                          // create an array with edges for graph visualization
                          edges.push({
                            from: 1,
                            to: i + 2,
                            label: key1,
                            font: {
                              color: 'green'
                            }
                          });

                          if (key1.includes("domain")) {
                            conceptHasDomain = key1;
                            if (isConceptInside(key2) && key4 === "uri") {
                              key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2 +
                              '&quot;); return false; ">' + key2 +
                              '</a>';
                            } else if (!isOWLIndividiual(key2) && !isConceptInside(key2) && key4 === "uri"){
                              key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 +
                              '&quot;); return false; ">' + key2 +
                              '</a>';
                            }
                            domainTable += '<tr>    <td>' + key2 + '</td>  </tr>';
                          } else if (key1.includes("range")) {
                            conceptHasRange = key1;
                            if (isConceptInside(key2) && key4 === "uri") {
                              key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2 +
                              '&quot;); return false; ">' + key2 +
                              '</a>';
                            } else if (!isOWLIndividiual(key2) && !isConceptInside(key2) && key4 === "uri") {
                              key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 +
                              '&quot;); return false; ">' + key2 +
                              '</a>';
                            }
                            rangeTable += '<tr>    <td>' + key2 + '</td>  </tr>';

                          } else { // not a domain or range
                            
                            if (key1.includes("broader") || key1.includes("narrower")) {
                              key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2URI +
                                '&quot;,&quot;SKOS&quot;); return false; ">' + key2 + '</a>';
                            } else if (isOWLIndividiual(key2) && !key1.includes("label") && key4 === "uri") {
                              key2 = '<a href="#" onclick="showInstanceDetails(&quot;' + key2URI + '&quot;); ">' +
                                key2 + '</a>';
                            } else if (!isOWLIndividiual(key2) && !isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
                              key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 +
                                '&quot;); return false; ">' + key2 +
                                '</a>';
                            }
                            
                            if (isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
                              key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2 +
                                '&quot;); return false; ">' + key2 +
                                '</a>';
                            }

                            if (key3 && key4 === "literal") {
                              key2 = key2 + '@' + key3;
                            }
<<<<<<< HEAD
                            
                            // making row entry in the table
                            // console.log('editF(' + predicate_value + ',' + obj_value + ')"')
                            // predicate_value = str(predicate_value)
                            // obj_value = str(obj_value)
                            // console.log(predicate_value)
                            // console.log(obj_value)
                            // console.log(typeof(predicate_value))
                            // console.log(typeof(obj_value))
                            predicate_value = "'" + predicate_value + "'"
                            obj_value = "'" + obj_value + "'"
                            editButton = '<button class="ui button" onclick="editF(' + predicate_value + ',' + obj_value + ')">Edit</button>';
                            table += '<tr><td>' + key1 + '</td><td>' + key2 + '</td><td>' + editButton + '</td></tr>';
=======

                            var sub_regex = /{\s+<.*>/g;
                            var subject_value = global_var_query.match(sub_regex)[0];
                            subject_value = subject_value.slice(subject_value.indexOf("<")).slice(1,-1);
                            
                            var spo_key = [subject_value, predicate_value, MD5(obj_value)].join(SEPARATOR);

                            subject_value =  "'" + subject_value + "'"
                            predicate_value = "'" + predicate_value + "'"
                            obj_value = "'" + obj_value + "'"
    
                            if(lockedItemsClient[spo_key]){
                              editButton = '<button id=' + spo_key + ' disabled class="ui button alleditbuttons" onclick="editF('+ subject_value + ',' + predicate_value + ',' + obj_value + ')">Edit</button>';
                              is_spo_edit = true;
                            }
                            else{
                              editButton = '<button id=' + spo_key + ' class="ui button alleditbuttons" onclick="editF('+ subject_value + ',' + predicate_value + ',' + obj_value + ')">Edit</button>';
                            }
                            table += '<tr><td>' + key1 + '</td><td>' + key2 + '</td><td>' + editButton + '</td></tr>';

>>>>>>> 1fcbc8957db1271b8c323fa2d97189eb0a919291
                          }
                        } // end of table entities loop

                        // close HTML tables with thier tags
                        table += '</table> ';
                        domainTable += '</table> ';
                        rangeTable += '</table> ';
                      }

                      $('#infoTabs').show();
                      $("#infoTabs").animate({
                        scrollTop: 0
                      }, "fast");

                      //display returned data on the Html tables
                      $("#conceptHead").show();
                      if (currentSelectedConcept.includes("http://") || currentSelectedConcept.includes(
                          "https://")) { //check if it skosURI
                        currentSelectedConcept = trimHash(trimSlash(currentSelectedConcept));
                      }
                      nodes.push({
                        id: 1,
                        label: currentSelectedConcept,
                        font: {
                          size: 20,
                          color: 'red',
                          face: 'sans'
                        },
                        color: '#e9d4df'
                      });

                      var sub_regex = /{\s+<.*>/g;
                      var subject_value = global_var_query.match(sub_regex)[0];
                      subject_value = subject_value.slice(subject_value.indexOf("<")).slice(1,-1);
                      
                      predicate_value = NONE_VALUE;
                      obj_value = NONE_VALUE;
                      
                      var spo_key = [subject_value, predicate_value, MD5(obj_value)].join(SEPARATOR);

                      subject_value =  "'" + subject_value + "'"
                      predicate_value = "'" + predicate_value + "'"
                      obj_value = "'" + obj_value + "'"
                      
                      if(lockedItemsClient[spo_key]){
                        editButton = '<button id=' + spo_key + ' disabled class="ui button subjecteditbutton alleditbuttons" onclick="editF('+ subject_value + ',' + predicate_value + ',' + obj_value + ')">Edit</button>';
                        is_subject_edit = true;
                      }
                      else {
                        editButton = '<button id=' + spo_key + ' class="ui button subjecteditbutton alleditbuttons" onclick="editF('+ subject_value + ',' + predicate_value + ',' + obj_value + ')">Edit</button>';
                      }

                      $("#conceptHead ").html('<p >  Details: <code>' + currentSelectedConcept +
                        '</code><span style="float: right;">' + editButton + '</span></p>');
                      $("#infoDetails").show();
                      $('#viewList').show();
                      // domainTable has some values to show
                      if (!conceptHasDomain == "")
                        $("#domainTable").show();
                      else
                        $("#domainTable").hide();
                      // rangeTable has some values to show
                      if (!conceptHasRange == "")
                        $("#rangeTable").show();
                      else {
                        $("#rangeTable").hide();
                      }

                      $("#detailTable").html(table);
                      $("#domainTable").html(domainTable);
                      $("#rangeTable").html(rangeTable);
                      var dataToBeChecked = [];
                      if ($('#individualsPropertyRadio').is(':checked')) {
                        // make both rangePropertyTable and domainPropertyTable  empty
                        $("#rangePropertyTable").hide();
                        $("#domainPropertyTable").hide();
                      } else {
                        if ($('#SKOSViewCheckBox').is(':checked'))
                          dataToBeChecked = SKOSData;
                        else
                          dataToBeChecked = RDFSData;
                        // get currentSelectedURI for domainPropertyTable and rangePropertyTable
                        var conceptURI = _.find(dataToBeChecked, function (o) {
                          if (o.concept === currentSelectedConcept)
                            return o;
                        }).URI;
                        $("#rangePropertyTable").hide();
                        $("#domainPropertyTable").hide();
                        // check if other concepts use this word as domain
                        getValuesUseditAsProperty(conceptURI, 'domain');
                        // check if other concepts use this word as range
                        getValuesUseditAsProperty(conceptURI, 'range');
                      }
                      $("#sourceCodeTab").show();
                      $('#graphTab').show();

                      // create a network
                      var container = document.getElementById('mynetwork');
                      var data = {
                        nodes: nodes,
                        edges: edges
                      };
                      var options = {
                        autoResize: false,
                        height: '400px',
                        width: '500px',
                        nodes: {
                          shape: 'dot',
                          size: 20
                        },
                        layout: {
                          randomSeed: undefined,
                          improvedLayout: true,
                          hierarchical: {
                            enabled: false,
                            levelSeparation: 150,
                            nodeSpacing: 100,
                            treeSpacing: 200,
                            blockShifting: true,
                            edgeMinimization: true,
                            parentCentralization: true,
                            direction: 'RL', // UD, DU, LR, RL
                            sortMethod: 'hubsize' // hubsize, directed
                          }
                        },
                        interaction: {
                          navigationButtons: true,
                          keyboard: true
                        },
                        physics: {
                          enabled: true,
                          barnesHut: {
                            gravitationalConstant: -2000,
                            centralGravity: 0.3,
                            springLength: 95,
                            springConstant: 0.04,
                            damping: 0.09,
                            avoidOverlap: 0
                          },
                          forceAtlas2Based: {
                            gravitationalConstant: -50,
                            centralGravity: 0.01,
                            springConstant: 0.08,
                            springLength: 100,
                            damping: 0.4,
                            avoidOverlap: 0
                          },
                          repulsion: {
                            centralGravity: 0.2,
                            springLength: 200,
                            springConstant: 0.05,
                            nodeDistance: 100,
                            damping: 0.09
                          },
                          hierarchicalRepulsion: {
                            centralGravity: 0.0,
                            springLength: 100,
                            springConstant: 0.01,
                            nodeDistance: 120,
                            damping: 0.09
                          },
                          maxVelocity: 50,
                          minVelocity: 0.1,
                          solver: 'barnesHut',
                          stabilization: {
                            enabled: true,
                            iterations: 1000,
                            updateInterval: 100,
                            onlyDynamicEdges: false,
                            fit: true
                          },
                          timestep: 0.5,
                          adaptiveTimestep: true
                        }
                      };
                      var network = new vis.Network(container, data, options);
                      var fitNetworkFirstTime = false;
                      // add event listeners
                      network.on('select', function (params) {
                        document.getElementById('selection').innerHTML = 'Selection: ' + params.nodes;
                      });

                      network.on('afterDrawing', function () {
                        if (!fitNetworkFirstTime) {
                          network.fit();
                        }
                        fitNetworkFirstTime = true;
                      });
                      network.once('stabilized', function () {
                        if (network.getScale() < 0.2)
                          var scaleOption = {
                            scale: 0.3
                          };
                        network.moveTo(scaleOption);
                      })

                      // To render oncemore the graph id the graphTab is clicked
                      $('#graphTab').on('click', function () {
                        network = new vis.Network(container, data, options);
                        network.once('stabilized', function () {
                          if (network.getScale() < 0.2)
                            var scaleOption = {
                              scale: 0.3
                            };
                          network.moveTo(scaleOption);
                        })
                        network.on('afterDrawing', function () {
                          if (!fitNetworkFirstTime)
                            network.fit();
                          fitNetworkFirstTime = true;

                        });
                      });
                      // To reset fitNetworkFirstTime when user click other than graphTab
                      $('#documentationTab').on('click', function () {
                        fitNetworkFirstTime = false;
                      });
                      $('#sourceCodeTab').on('click', function () {
                        fitNetworkFirstTime = false;
                      });

<<<<<<< HEAD
                    } // End Of render()

                    function editF(predicate_value, obj_value) {
                      $("#predicate_value").text(predicate_value)
                      $("#obj_value").text(obj_value)
                      $('.ui.modal.editmodal').modal('show');
                    };
=======
                      // added by zaib
                      if (is_subject_edit){
                        $(".alleditbuttons").attr("disabled", true);
                      }
                      if (is_spo_edit){
                        $(".subjecteditbutton").attr("disabled", true);
                      }

                    } // End Of render()

                    var global_var_rdf_arr = null;
                    var global_var_query = null;

                    function editF(subject_value, predicate_value, obj_value) {

                      console.log("subject_value very important")
                      console.log(subject_value)
                      
                      // if item edited is a subject. show only subject textbox
                      if (predicate_value == NONE_VALUE && obj_value == NONE_VALUE){
                        $(".header.editHeader").data("edited", "s");
                        $("#subject_value").data("old", subject_value);
                        $("#subject_value").val(subject_value);
                        $("#s_edit").css("display", "block")
                        $("#spo_edit").css("display", "none")
                      } else {
                        // item edited is predicate and object
                        $(".header.editHeader").data("edited", "spo");
                        $("#predicate_value").data("old", predicate_value);
                        $("#predicate_value").val(predicate_value);
                        $("#obj_value").data("old", obj_value);
                        $("#obj_value").val(obj_value);
                        $("#spo_edit").css("display", "block")
                        $("#s_edit").css("display", "none")
                      }
                    
                      $('.ui.modal.editmodal').modal({
                        closable: false
                      }).modal('show');

                      socket.emit('editStarted', subject_value, predicate_value, obj_value, socket.id);

                      $("#cancel").unbind("click").click(function () {
                        socket.emit('editCanceled', subject_value, predicate_value, obj_value, socket.id);
                      });
                      
                      // setTimeout(function() {
                      //   $('#cancel').trigger('click')
                      //   // console.log("cancel click fired");
                      // }, 60000);

                    };

                    function changeRDF() {
                      var item_edited = $(".header.editHeader").data("edited")

                      // if item edited is a subject. only edit subject
                      if (item_edited == "s"){
                        return changeRDF_s();
                      } 

                      // item edited is predicate and object
                      if (item_edited == "spo"){
                        return changeRDF_spo();
                      }

                    }

                    function changeRDF_s() {
                      var old_subject_value = $("#subject_value").data("old");
                      var value_new = '<' + $("#subject_value").val() + '>';

                      var graphs_regex = /from .*/g;
                      var graphs = global_var_query.match(graphs_regex);

                      var sub_regex = /{\s+<.*>/g;
                      var subject_value_uri = global_var_query.match(sub_regex)[0];
                      subject_value_uri = subject_value_uri.slice(subject_value_uri.indexOf("<"));

                      positions = [
                       {s: subject_value_uri, p: "?p", o: "?o", var: "s"},
                       {s: "?s", p: subject_value_uri, o: "?o", var: "p"},
                       {s: "?s", p: "?p", o: subject_value_uri, var: "o"}
                      ]
                      
                      var sparql = "";

                      graphs.forEach(graph => {
                        graph = graph.slice(graph.indexOf("<"));

                        positions.forEach(posi => {

                          sparql = 'SELECT * FROM ' + graph + ' WHERE { ' + 
                          posi["s"] + ' ' + posi["p"] + ' ' + posi["o"] + '.}';

                          $.ajax({
                            type: 'POST',
                            data: {
                              query: encodeURIComponent(sparql)
                            },
                            url: './../../sparqlServer/query',
                            success: function (data, response, jqXHR) {

                              JSON.parse(data)["results"]["bindings"].forEach(binding => {

                                // make the values urls literals
                                for (var entity in binding){
                                  if (binding[entity].hasOwnProperty("type")){
                                    if (binding[entity].type == "uri"){
                                      binding[entity]["value"] = '<' + binding[entity]["value"] + '>';
                                    }
                                    if (binding[entity].type == "literal"){
                                      binding[entity]["value"] = '"' + binding[entity]["value"] + '"';

                                      if (binding[entity].hasOwnProperty("xml:lang")){
                                        binding[entity]["value"] = binding[entity]["value"] + '@' + binding[entity]["xml:lang"];
                                      }
                                    }
                                  }
                                }

                                // fill in the third url
                                old_value = posi[posi["var"]]
                                binding[posi["var"]] = {value: posi[posi["var"]]};
                                
                                // console.log(binding);
                                deleteAndInsert_s(graph, value_new, posi["var"], binding);
                              });

                            }
                          });

                        }); // posi
                      }); // graph

                      // tell everyone that edit was completed
                      socket.emit('editCompleted', old_subject_value , NONE_VALUE, NONE_VALUE, value_new.slice(1,-1));

                    } // end of changeRDF_s

                    function changeRDF_spo() {
                      var old_predicate_value = $("#predicate_value").data("old");
                      var predicate_value = $("#predicate_value").val();
                      var old_obj_value = $("#obj_value").data("old");
                      var obj_value = $("#obj_value").val();

                      var old_predicate_value_string = old_predicate_value;
                      var old_obj_value_string = old_obj_value;

                      for (var i = 0; i < global_var_rdf_arr.length; i++) {
                        if (global_var_rdf_arr[i]["p"]["value"] === old_predicate_value && global_var_rdf_arr[i]["o"]["value"] === old_obj_value){

                          global_var_rdf_arr[i]["p"]["value"] = predicate_value;
                          global_var_rdf_arr[i]["o"]["value"] = obj_value;

                          changed = global_var_rdf_arr[i]

                          // make uri or literal with language part
                          predicate_value = '<' + predicate_value + '>';
                          old_predicate_value = '<' + old_predicate_value + '>';

                          if (changed["o"]["type"] === "uri"){
                            old_obj_value = '<' + old_obj_value + '>';
                            obj_value = '<' + obj_value + '>';
                          }
                          if (changed["o"]["type"] === "literal"){
                            old_obj_value = '"' + old_obj_value + '"';
                            obj_value = '"' + obj_value + '"'

                            if (changed["o"]["xml:lang"]){
                              old_obj_value = old_obj_value + '@'+ changed["o"]["xml:lang"];
                              obj_value = obj_value + '@'+ changed["o"]["xml:lang"];
                            }
                          }
                        }
                      }

                      var graphs_regex = /from .*/g;
                      var graphs = global_var_query.match(graphs_regex);

                      var sub_regex = /{\s+<.*>/g;
                      var subject_value = global_var_query.match(sub_regex)[0];
                      subject_value = subject_value.slice(subject_value.indexOf("<"));

                      var sparql = ""
                      var found = false;

                      graphs.forEach(graph => {
                        graph = graph.slice(graph.indexOf("<"));

                        sparql = 'SELECT ?check FROM ' + graph + ' WHERE { ' + subject_value + ' ' 
                        + old_predicate_value + ' ?check . FILTER( ?check = ' + old_obj_value + ' ) }';
                        
                        found = false;

                        $.ajax({
                          type: 'POST',
                          data: {
                            query: encodeURIComponent(sparql)
                          },
                          url: './../../sparqlServer/query',
                          success: function (data, response, jqXHR) {
                            data = JSON.parse(data);
                            found = data["results"]["bindings"].length > 0;
                            if (found) {
                              deleteAndInsert_spo(graph, subject_value,  old_predicate_value, old_obj_value, predicate_value, obj_value);

                              // tell everyone that edit was completed
                              subject_value = subject_value.slice(1, -1);
                              socket.emit('editCompleted', subject_value, old_predicate_value_string, old_obj_value_string, NONE_VALUE);

                              // refresh the local view according to the made changes
                              // render({results: {bindings: global_var_rdf_arr}}, global_var_query);
                            }
                          }
                        });
                      });
                      
                    }; // end of changeRdf_spo

                    function deleteAndInsert_s(graph, value_new, value_posi, binding){
                      sparql = 'DELETE DATA { GRAPH ' + graph + ' { ' + binding.s.value + ' ' + binding.p.value + ' ' + binding.o.value + '} }';
                      run_query(sparql);

                      // change the value at the position that needs to be updated
                      binding[value_posi]["value"] = value_new;
                      
                      sparql = 'INSERT DATA { GRAPH ' + graph + ' { ' + binding.s.value + ' ' + binding.p.value + ' ' + binding.o.value + '} }';
                      run_query(sparql);
                    }

                    function deleteAndInsert_spo(graph, subject_value,  old_predicate_value, old_obj_value, predicate_value, obj_value){
                      sparql = 'DELETE DATA { GRAPH ' + graph + ' { ' + subject_value + ' ' + old_predicate_value + ' ' + old_obj_value + '} }';
                      run_query(sparql);
                      
                      sparql = 'INSERT DATA { GRAPH ' + graph + ' { ' + subject_value + ' ' + predicate_value + ' ' + obj_value + '} }';
                      run_query(sparql);
                    }

                    function run_query(sparql){
                      $.ajax({
                          type: 'POST',
                          data: {
                            query: encodeURIComponent(sparql)
                          },
                          url: './../../sparqlServer/update'
                      });
                    }
>>>>>>> 1fcbc8957db1271b8c323fa2d97189eb0a919291

                    ///////////////////////////////////////////
                    // Waleed Code Starts
                    ///////////////////////////////////////////

                    socket.on('initialState', function(lockedItemsServer){
                      lockedItemsClient = lockedItemsServer
                      console.log('InitialState')
                      console.log(lockedItemsClient);
                    });

                    socket.on('itemLocked', function(subject_value, predicate_value, obj_value, lockedItemsServer){
                      console.log('itemLocked');
                      lockedItemsClient = lockedItemsServer
                      // console.log(lockedItemsClient);

                      siiimpleToast.alert("Locked for Editing");

                      var spo_key = [subject_value, predicate_value, MD5(obj_value)].join(SEPARATOR);
                      // console.log(socket.id);
                      is_subject_edit = predicate_value == NONE_VALUE && obj_value == NONE_VALUE;

                      if (document.getElementById(spo_key)){
                        document.getElementById(spo_key).disabled = true;
                        $(".subjecteditbutton").attr("disabled", true);
                        if (is_subject_edit){
                          $(".alleditbuttons").attr("disabled", true);
                        }
                      }

                    });

                    socket.on('itemUnlocked_editCompleted', function(subject_value, predicate_value, obj_value, new_subject, lockedItemsServer){
                      console.log('itemUnlocked_editCompleted');

                      lockedItemsClient = lockedItemsServer
                      // console.log(lockedItemsClient);

                      siiimpleToast.success('Edit Successful');

                      var spo_key = [subject_value, predicate_value, MD5(obj_value)].join(SEPARATOR);
                   
                      is_subject_edit = predicate_value == NONE_VALUE && obj_value == NONE_VALUE;

                      if (document.getElementById(spo_key)){
                        document.getElementById(spo_key).disabled = false;
                        $(".subjecteditbutton").attr("disabled", false);

                        if (is_subject_edit){
                          $(".alleditbuttons").attr("disabled", false);
                        }
                      }

                      if (new_subject != NONE_VALUE){
                        var new_subject_text = new_subject.match(/\/([^\/]+)\/?$/)[1];
                        console.log(new_subject);
                        
                        var z
                        for (z=0;z<newBuildTreeData.length;z++){
                          // console.log(newBuildTreeData[z].URI);
                          // console.log(new_subject);
                          if(newBuildTreeData[z].URI == subject_value){
                            newBuildTreeData[z].URI = new_subject;
                            newBuildTreeData[z].text = new_subject_text;
                            newBuildTreeData[z].concept = new_subject_text;
                            console.log(newBuildTreeData[z].URI);
                            console.log(new_subject);
                          }
                        }

                        var x
                        for (x=0;x<RDFSData.length;x++){
                          // console.log(newBuildTreeData[z].URI);
                          // console.log(new_subject);
                          if(RDFSData[x].URI == subject_value){
                            RDFSData[x].URI = new_subject;
                            RDFSData[x].text = new_subject_text;
                            RDFSData[x].concept = new_subject_text;
                            console.log(RDFSData[x].URI);
                            console.log(new_subject);
                          }
                        }

                        var a
                        for (a=0;a<currentTreeData.length;a++){
                          // console.log(newBuildTreeData[z].URI);
                          // console.log(new_subject);
                          if(currentTreeData[a].URI == subject_value){
                            currentTreeData[a].URI = new_subject;
                            currentTreeData[a].text = new_subject_text;
                            currentTreeData[a].concept = new_subject_text;
                            console.log(currentTreeData[a].URI);
                            console.log(new_subject);
                          }
                        }

                        buildTree(newBuildTreeData);

                      }

                      if (global_var_query) {
                        var sub_regex = /{\s+<.*>/g;
                        var visible_subject = global_var_query.match(sub_regex)[0];
                        visible_subject = visible_subject.slice(visible_subject.indexOf("<")).slice(1,-1);

                        if (visible_subject == subject_value){
                          // refresh the view if changes are made in curently viewed concept

                          // subject changed
                          if (new_subject != NONE_VALUE){
                            global_var_query = global_var_query.replace(visible_subject, new_subject);
                           
                            // remove this later, very wrong
                            currentSelectedConcept = new_subject;
                          }
                          
                          setTimeout(function() { 
                            $.ajax({
                              type: 'POST',
                              data: {query: encodeURIComponent(global_var_query)},
                              url: './../../sparqlServer/query',
                              success: function (data, response, jqXHR) {
                                var result = JSON.parse(data)
                                if (result != null) {

                                  render(result, global_var_query)
                                  console.log("should change");
                                  console.log(result);
                                }
                              }
                            });
                          }, 500);

                        }
                      }

                    });

                    socket.on('itemUnlocked_editCanceled', function(subject_value, predicate_value, obj_value, lockedItemsServer){
                      console.log('itemUnlocked_editCanceled');

                      lockedItemsClient = lockedItemsServer
                      // console.log(lockedItemsClient);

                      siiimpleToast.message('User Cancelled Editing');

                      var spo_key = [subject_value, predicate_value, MD5(obj_value)].join(SEPARATOR);

                      is_subject_edit = predicate_value == NONE_VALUE && obj_value == NONE_VALUE;

                      if (document.getElementById(spo_key)){
                        document.getElementById(spo_key).disabled = false;
                        $(".subjecteditbutton").attr("disabled", false);

                        if (is_subject_edit){
                          $(".alleditbuttons").attr("disabled", false);
                        }
                      }

                    });

                    socket.on('editTimeout', function(subject_value, predicate_value, obj_value, client_socket_id, lockedItemsServer){
                      console.log('editTimeout');

                      lockedItemsClient = lockedItemsServer
                      // console.log(lockedItemsClient);

                      console.log(socket.id);
                      console.log(client_socket_id);
                      console.log(spo_key);
                      if(socket.id == client_socket_id){
                        $('#cancel').trigger('click');
                      }

                      var spo_key = [subject_value, predicate_value, MD5(obj_value)].join(SEPARATOR);

                      is_subject_edit = predicate_value == NONE_VALUE && obj_value == NONE_VALUE;
                      
                      // siiimpleToast.message('User Cancelled Editing');
                      if (document.getElementById(spo_key)){
                        document.getElementById(spo_key).disabled = false;
                        $(".subjecteditbutton").attr("disabled", false);
                        
                        if (is_subject_edit){
                          $(".alleditbuttons").attr("disabled", false);
                        }
                      }

                    });

                    ///////////////////////////////////////////
                    // Waleed Code Ends
                    ///////////////////////////////////////////

                    // Call when document is ready
                    $(document).ready(function (e) {
                      $(document).on('click', 'a[href="#"]', function (e) {
                        e.preventDefault();
                      });
                    });
                  </script>
                  <!-- End of JavaScript coding-->